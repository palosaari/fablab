{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Me Hello. I am Antti, CSE student from University of Oulu. This is my student blog for the Fab Lab Oulu Course. My main motivation to take that course was to learn how to design and implement mechanical parts using modern tools like 3D-printers and laser cutters. I am interested of many kind electronics, especially embedded devices. One particular thing that has had on my mind long time is antenna array of 8 phased half-wave dipoles. Possible implementation methods could be PCB antenna or aluminum laser(?) cutted antenna thus I need to learn some needed tools.","title":"About Me"},{"location":"#about-me","text":"Hello. I am Antti, CSE student from University of Oulu. This is my student blog for the Fab Lab Oulu Course. My main motivation to take that course was to learn how to design and implement mechanical parts using modern tools like 3D-printers and laser cutters. I am interested of many kind electronics, especially embedded devices. One particular thing that has had on my mind long time is antenna array of 8 phased half-wave dipoles. Possible implementation methods could be PCB antenna or aluminum laser(?) cutted antenna thus I need to learn some needed tools.","title":"About Me"},{"location":"assignments/week01/","text":"1. Principles and practices Too many interesting projects on my mind... ...I would say weather station is most interesting, but also it is very challenging if amount of used sensors are very many. However, you can start with simple one first and add more later. Here comes short specs for each of those. Outdoor weather station Design and manufacture feature rich outdoor weather station. More sensors the better. Operating power could be taken from solar panels or wind turbine if electricity is not available. Communication by some wireless method, WiFi, LoRa, etc. Temperature Humidity Atmospheric pressure Wind speed Rainfall Seismometer Fog meter A lot of commercial solutions exits and most of those professional models are even very expensive (Vaisala, etc.). Block diagram Weather station. Picture by Kaisa, thanks! Weather station. Picture by Kaisa, thanks! Magic mirror Manufacture mirror that shows some live information, like weather forecast or room temperature. Technically it is computers screen which is covered by mirror glass than can be seen through - semi-transparent mirror. Computer drives the screen behind the mirror and does all the needed logic. Possible sensor used is for example motion sensor which turns on screen when motion is detected. ) Block diagram Magic mirror. Picture by Kaisa, thanks! Vehicle speed monitor Display that shows speed of the approaching car or some other object. Use Doppler radar as sensing speed of vehicle and display it on the screen and/or feed data electronically to some other systems. It is similar solutions than existing ones you can see on some places to warn if you are driving over the limits. Needs suitable doppler radar module and possible display and some logic. Block diagram","title":"1. Principles and practices"},{"location":"assignments/week01/#1-principles-and-practices","text":"","title":"1. Principles and practices"},{"location":"assignments/week01/#too-many-interesting-projects-on-my-mind","text":"...I would say weather station is most interesting, but also it is very challenging if amount of used sensors are very many. However, you can start with simple one first and add more later. Here comes short specs for each of those.","title":"Too many interesting projects on my mind..."},{"location":"assignments/week01/#outdoor-weather-station","text":"Design and manufacture feature rich outdoor weather station. More sensors the better. Operating power could be taken from solar panels or wind turbine if electricity is not available. Communication by some wireless method, WiFi, LoRa, etc. Temperature Humidity Atmospheric pressure Wind speed Rainfall Seismometer Fog meter A lot of commercial solutions exits and most of those professional models are even very expensive (Vaisala, etc.). Block diagram Weather station. Picture by Kaisa, thanks! Weather station. Picture by Kaisa, thanks!","title":"Outdoor weather station"},{"location":"assignments/week01/#magic-mirror","text":"Manufacture mirror that shows some live information, like weather forecast or room temperature. Technically it is computers screen which is covered by mirror glass than can be seen through - semi-transparent mirror. Computer drives the screen behind the mirror and does all the needed logic. Possible sensor used is for example motion sensor which turns on screen when motion is detected. ) Block diagram Magic mirror. Picture by Kaisa, thanks!","title":"Magic mirror"},{"location":"assignments/week01/#vehicle-speed-monitor","text":"Display that shows speed of the approaching car or some other object. Use Doppler radar as sensing speed of vehicle and display it on the screen and/or feed data electronically to some other systems. It is similar solutions than existing ones you can see on some places to warn if you are driving over the limits. Needs suitable doppler radar module and possible display and some logic. Block diagram","title":"Vehicle speed monitor"},{"location":"assignments/week02/","text":"2. Project management Assignment Work through a git tutorial Build a personal site in the class archive describing you and your final project Setup tools I am using Fedora Linux workstation so many of needed tools were easily available from the distribution package management. Also I have used many of the needed tools earlier so those were already installed. Git Git is the most popular distributed version control tool. It does not in itself limit what kind of files are stored there, but it is typically used in software projects. Version control takes place locally on the machine, from where it is then synchronized to the servers. This decentralization model via servers allows multiple people to develop the same code base in parallel at the same time. sudo dnf install git Tool was already installed. I have used it a lot. Here is some basic commands I use most often: git status git log git show git diff git reset --hard git add <filename> git commit -s git push origin master Status shows general state of your current tree, like edited or new files. Log shows your commit history. Show shows last commit on your tree. Diff shows uncommitted changes what you have made your files. Reset --hard is handy when you have made changes to tree, but you need to discard those for some reason. Add adds file or directory you have edited to your commit you are going to do. Commit does the commit itself. Push uploads your local working tree to GitHub on my chase. GitHub GitHub is a very popular server / service for Git repositories - a place on the Internet where you can store and share your own Git repositories. Today, GitHub offers a large number of related services, e.g. bug tracker, documentation and web pages (GitHub Pages). GitHub was already in use and configured. No need to to anything special. I decided to use it instead of GitLab due to that reason. You need to create a user account for GitHub. In addition, it is often practical, but not necessary if https used, to add ssh keys in addition to the password, so you don't have to enter the password every time you update the repository on GitHub. GitHub SSH keys Here is yet another documentation required by documentation how to add ssh keys to GitHub. On GitHub web user interface, go to your account settings. Settings => SSh and GPG keys. Push green button \"New SSH key\". Add SSH key Give some name you like to key, I used \"Home Workstation\". Then you need to find your personal PUBLIC key. Here is how it is found from Linux workstation - assuming you have already generated it. Copy & paste that ssh key (do not paste this unique key, it is my public key, you need your own) to GitHub as seen on picture below. I already had ssh keys because I usually use them in many places. ssh keys can be generated with the ssh-keygen command, for example. cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5X7AWrmUrXkaqkgtyf7t4/j1miUFQu/j+BYfi/yiJswm2ampZE+eBI16EooCwK8z3l//M/DE98pY5ClMI8ulzqrStHdLXxFm4enLBr891/w0U+utejjKeenOGq8oJ0zQJLlVZ31JQwtdAO+hWyz+nz18TvmzQSs8dwA73nf9tGLkfbfTDxnoRio83NUHA3I0ReOH9ukK5EM4uM9HvCGDlObtm2atjnJAI63AS8ztEnEJGUhPFjTy1FX79yPSnClm2XfJeF4Lid4lb7jtpVmWtqQPnHH6kB0Qt+b5a+ZF2LXHGq47yoVTnnZhnUTdMyMLtCQ/rMlBpPil1/5vYizzUQ== crope@localhost.localdomain Add new SSH key As you are going to add new login method / key to your existing GitHub account it will ask your password as confirmation. Confirm SSH key If everything went correctly added key should appear to list of ssh keys at your GitHub account. SSH key added GitHub Pages GitHub Pages is a GitHub-related website publishing platform. The website is uploaded to the GitHub repository from where it is automatically updated to the GitHub Pages. The GitHub Pages feature must be turned on in the GitHub settings. I generate a site to publish to GitHub Pages on my own machine and publish it with the mkdocs gh-deploy command. Following settings are needed to GitHub Pages to point out location it loads that website. GitHub Pages MkDocs First I thought I will maintain static HTML pages by hand. After I looked some videos, recommended MkDocs starts feeling more handy so I decided to give it a try. Also there was Material theme based existing template for the course. Installation was pretty straightforward from the package manager: sudo dnf install mkdocs-material . It will install both theme and documentation tool as a dependency. After that I manually copied course template files to my local working Git tree and tested it with command mkdocs serve . Worked, pretty simple. sudo dnf install mkdocs-material There was some challenges releasing that documentation on GitHub Pages. MkDocs documentation needs to be build in order to get site that can be released on GitHub Pages. It didn't feel very comfortable to commit machine build documentation to my working Git branch as it pollutes branch unintentionally without a reason. Fortunately there was a command mkdocs gh-deploy which makes new branch for documentation and publish it automatically. mkdocs serve mkdocs gh-deploy Serve launch local development site to your computer. gh-deploy builds site and uploads it to the GitHub Pages. Git / GitHub process I created a simple MkDocs Material page for GitHub for testing purposes and to test the operation of the tools. In addition to the tools already mentioned, you need the github gh tool to control GitHub from the command line. sudo dnf install gh $ mkdocs new . INFO - Writing config file: ./mkdocs.yml INFO - Writing initial docs: ./docs/index.md $ echo \"theme:\" >> mkdocs.yml $ echo \" name: material\" >> mkdocs.yml $ git init -b master Initialized empty Git repository in /home/crope/fablab/tmp/.git/ $ git add . $ git commit -m \"initial commit\" [master (root-commit) 63bc513] initial commit 2 files changed, 21 insertions(+) create mode 100644 docs/index.md create mode 100644 mkdocs.yml $ gh repo create fablab_test --push --public --source ./ \u2713 Created repository palosaari/fablab_test on GitHub \u2713 Added remote git@github.com:palosaari/fablab_test.git \u2713 Pushed commits to git@github.com:palosaari/fablab_test.git $ mkdir docs/assignments $ echo \"# 1. Hello World\" > docs/assignments/week01.md $ git add . $ git commit -m \"add week 1\" [master 6cb5515] add week 1 1 file changed, 1 insertion(+) create mode 100644 docs/assignments/week01.md $ git status On branch master Your branch is ahead of 'origin/master' by 1 commit. (use \"git push\" to publish your local commits) nothing to commit, working tree clean $ git push Enumerating objects: 7, done. Counting objects: 100% (7/7), done. Delta compression using up to 8 threads Compressing objects: 100% (3/3), done. Writing objects: 100% (5/5), 420 bytes | 420.00 KiB/s, done. Total 5 (delta 0), reused 4 (delta 0), pack-reused 0 To github.com:palosaari/fablab_test.git d872937..6cb5515 master -> master $ git reset --hard HEAD~1 HEAD is now at d872937 initial commit $ git fetch $ git status On branch master Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded. (use \"git pull\" to update your local branch) nothing to commit, working tree clean $ git pull Updating d872937..6cb5515 Fast-forward docs/assignments/week01.md | 1 + 1 file changed, 1 insertion(+) create mode 100644 docs/assignments/week01.md $ git status On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean $ gh repo delete fablab_test ? Type palosaari/fablab_test to confirm deletion: palosaari/fablab_test \u2713 Deleted repository palosaari/fablab_test $ Command Explanation mkdocs new . Create new MkDocs site echo \"theme:\" >> mkdocs.yml Use Material theme for MkDocs echo \" name: material\" >> mkdocs.yml Use Material theme for MkDocs git init -b master Create Git repository git add . Add all files in current directory to commit set git commit -m \"initial commit\" Commit changes to local repository gh repo create fablab_test --push --public --source ./ Create GitHub repository and push local repository to GitHub mkdir docs/assignments Create directory for MkDocs web-page echo \"# 1. Hello World\" > docs/assignments/week01.md Add Hello World MkDocs web-page git add . Add docs/assignments/week01.md to commit set git commit -m \"add week 1\" Commit changes to local repository git status Check git repository status. It says it has one commit more than remote repository. git push Synch changes from local to remote repository. git reset --hard HEAD~1 Remove most recent commit from local repository git fetch Download changes from remote repository. git status Check git repository status. It says local has one commit less than remote repository. git pull Add changes from remote to local repository. git status It says local repository is same than remote. gh repo delete fablab_test Delete test GitHub repository Creating website MkDocs is the web page generation tool I use. Its operation is based on the generation of static web pages from code written in Markdown markup language. Markdown, on the other hand, is a very simple language in syntax. A document written with Markdown is easy to read and write with just a text editor. MkDocs converts documents written with Markdown to html format, which is used on web pages. I had no previous experience with MkDocs, so it felt easy to try the Fab Academy template provided. The template was simple, including in practically a blank page for each week. After learning the basics I removed all the extra weeks as I will add them as I do them. MkDocs uses a directory structure to specify the layout of a site. You can see that in this case as ./docs/assignments/ directory forms a section on your site called Assignments . All the public documentation files must go under ./docs/ directory, root ./ has only configuration file. Site public pages must have a .md file extension, which is then converted to html by MkDocs. The directory structure of the site looks like this. . \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 assignments \u2502 \u2502 \u251c\u2500\u2500 week01.md \u2502 \u2502 \u2514\u2500\u2500 week02.md \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u251c\u2500\u2500 week01 \u2502 \u2502 \u2502 \u251c\u2500\u2500 directory \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 file.img \u2502 \u2502 \u2502 \u2514\u2500\u2500 file.img \u2502 \u2502 \u2514\u2500\u2500 week02 \u2502 \u2502 \u2514\u2500\u2500 file.img \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml The configuration file mkdocs.yml had a lot of settings and add-ons that I didn't need, so I generated a new configuration file with the mkdocs new command. The only extension I used was markdown_extensions: extra because I used the html tag it provides for the image caption tag. I deleted it later because I started using tables to add images and caption. I try to avoid adding anything extra, staying as default MkDocs as possible if there is no compelling need. The configuration file is so simple. You can add a lot of stuff there if needed. I\u2019ll probably add some css style or something to change the background color of the tables from gray to white. site_name: Fab Lab Oulu Student Blog theme: name: material I test pages written with Markdown locally on the machine using the mkdocs serve command. I save the changes to the local git and from there upload them to the GitHub Pages service with the mkdocs gh-deploy command and the git push command to the GitHub remote repository. So all-in-all, whole toolchain behind the site is: MkDocs Material for MkDocs Git GitHub GitHub Pages","title":"2. Project management"},{"location":"assignments/week02/#2-project-management","text":"","title":"2. Project management"},{"location":"assignments/week02/#assignment","text":"Work through a git tutorial Build a personal site in the class archive describing you and your final project","title":"Assignment"},{"location":"assignments/week02/#setup-tools","text":"I am using Fedora Linux workstation so many of needed tools were easily available from the distribution package management. Also I have used many of the needed tools earlier so those were already installed.","title":"Setup tools"},{"location":"assignments/week02/#git","text":"Git is the most popular distributed version control tool. It does not in itself limit what kind of files are stored there, but it is typically used in software projects. Version control takes place locally on the machine, from where it is then synchronized to the servers. This decentralization model via servers allows multiple people to develop the same code base in parallel at the same time. sudo dnf install git Tool was already installed. I have used it a lot. Here is some basic commands I use most often: git status git log git show git diff git reset --hard git add <filename> git commit -s git push origin master Status shows general state of your current tree, like edited or new files. Log shows your commit history. Show shows last commit on your tree. Diff shows uncommitted changes what you have made your files. Reset --hard is handy when you have made changes to tree, but you need to discard those for some reason. Add adds file or directory you have edited to your commit you are going to do. Commit does the commit itself. Push uploads your local working tree to GitHub on my chase.","title":"Git"},{"location":"assignments/week02/#github","text":"GitHub is a very popular server / service for Git repositories - a place on the Internet where you can store and share your own Git repositories. Today, GitHub offers a large number of related services, e.g. bug tracker, documentation and web pages (GitHub Pages). GitHub was already in use and configured. No need to to anything special. I decided to use it instead of GitLab due to that reason. You need to create a user account for GitHub. In addition, it is often practical, but not necessary if https used, to add ssh keys in addition to the password, so you don't have to enter the password every time you update the repository on GitHub.","title":"GitHub"},{"location":"assignments/week02/#github-ssh-keys","text":"Here is yet another documentation required by documentation how to add ssh keys to GitHub. On GitHub web user interface, go to your account settings. Settings => SSh and GPG keys. Push green button \"New SSH key\". Add SSH key Give some name you like to key, I used \"Home Workstation\". Then you need to find your personal PUBLIC key. Here is how it is found from Linux workstation - assuming you have already generated it. Copy & paste that ssh key (do not paste this unique key, it is my public key, you need your own) to GitHub as seen on picture below. I already had ssh keys because I usually use them in many places. ssh keys can be generated with the ssh-keygen command, for example. cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5X7AWrmUrXkaqkgtyf7t4/j1miUFQu/j+BYfi/yiJswm2ampZE+eBI16EooCwK8z3l//M/DE98pY5ClMI8ulzqrStHdLXxFm4enLBr891/w0U+utejjKeenOGq8oJ0zQJLlVZ31JQwtdAO+hWyz+nz18TvmzQSs8dwA73nf9tGLkfbfTDxnoRio83NUHA3I0ReOH9ukK5EM4uM9HvCGDlObtm2atjnJAI63AS8ztEnEJGUhPFjTy1FX79yPSnClm2XfJeF4Lid4lb7jtpVmWtqQPnHH6kB0Qt+b5a+ZF2LXHGq47yoVTnnZhnUTdMyMLtCQ/rMlBpPil1/5vYizzUQ== crope@localhost.localdomain Add new SSH key As you are going to add new login method / key to your existing GitHub account it will ask your password as confirmation. Confirm SSH key If everything went correctly added key should appear to list of ssh keys at your GitHub account. SSH key added","title":"GitHub SSH keys"},{"location":"assignments/week02/#github-pages","text":"GitHub Pages is a GitHub-related website publishing platform. The website is uploaded to the GitHub repository from where it is automatically updated to the GitHub Pages. The GitHub Pages feature must be turned on in the GitHub settings. I generate a site to publish to GitHub Pages on my own machine and publish it with the mkdocs gh-deploy command. Following settings are needed to GitHub Pages to point out location it loads that website. GitHub Pages","title":"GitHub Pages"},{"location":"assignments/week02/#mkdocs","text":"First I thought I will maintain static HTML pages by hand. After I looked some videos, recommended MkDocs starts feeling more handy so I decided to give it a try. Also there was Material theme based existing template for the course. Installation was pretty straightforward from the package manager: sudo dnf install mkdocs-material . It will install both theme and documentation tool as a dependency. After that I manually copied course template files to my local working Git tree and tested it with command mkdocs serve . Worked, pretty simple. sudo dnf install mkdocs-material There was some challenges releasing that documentation on GitHub Pages. MkDocs documentation needs to be build in order to get site that can be released on GitHub Pages. It didn't feel very comfortable to commit machine build documentation to my working Git branch as it pollutes branch unintentionally without a reason. Fortunately there was a command mkdocs gh-deploy which makes new branch for documentation and publish it automatically. mkdocs serve mkdocs gh-deploy Serve launch local development site to your computer. gh-deploy builds site and uploads it to the GitHub Pages.","title":"MkDocs"},{"location":"assignments/week02/#git-github-process","text":"I created a simple MkDocs Material page for GitHub for testing purposes and to test the operation of the tools. In addition to the tools already mentioned, you need the github gh tool to control GitHub from the command line. sudo dnf install gh $ mkdocs new . INFO - Writing config file: ./mkdocs.yml INFO - Writing initial docs: ./docs/index.md $ echo \"theme:\" >> mkdocs.yml $ echo \" name: material\" >> mkdocs.yml $ git init -b master Initialized empty Git repository in /home/crope/fablab/tmp/.git/ $ git add . $ git commit -m \"initial commit\" [master (root-commit) 63bc513] initial commit 2 files changed, 21 insertions(+) create mode 100644 docs/index.md create mode 100644 mkdocs.yml $ gh repo create fablab_test --push --public --source ./ \u2713 Created repository palosaari/fablab_test on GitHub \u2713 Added remote git@github.com:palosaari/fablab_test.git \u2713 Pushed commits to git@github.com:palosaari/fablab_test.git $ mkdir docs/assignments $ echo \"# 1. Hello World\" > docs/assignments/week01.md $ git add . $ git commit -m \"add week 1\" [master 6cb5515] add week 1 1 file changed, 1 insertion(+) create mode 100644 docs/assignments/week01.md $ git status On branch master Your branch is ahead of 'origin/master' by 1 commit. (use \"git push\" to publish your local commits) nothing to commit, working tree clean $ git push Enumerating objects: 7, done. Counting objects: 100% (7/7), done. Delta compression using up to 8 threads Compressing objects: 100% (3/3), done. Writing objects: 100% (5/5), 420 bytes | 420.00 KiB/s, done. Total 5 (delta 0), reused 4 (delta 0), pack-reused 0 To github.com:palosaari/fablab_test.git d872937..6cb5515 master -> master $ git reset --hard HEAD~1 HEAD is now at d872937 initial commit $ git fetch $ git status On branch master Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded. (use \"git pull\" to update your local branch) nothing to commit, working tree clean $ git pull Updating d872937..6cb5515 Fast-forward docs/assignments/week01.md | 1 + 1 file changed, 1 insertion(+) create mode 100644 docs/assignments/week01.md $ git status On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean $ gh repo delete fablab_test ? Type palosaari/fablab_test to confirm deletion: palosaari/fablab_test \u2713 Deleted repository palosaari/fablab_test $ Command Explanation mkdocs new . Create new MkDocs site echo \"theme:\" >> mkdocs.yml Use Material theme for MkDocs echo \" name: material\" >> mkdocs.yml Use Material theme for MkDocs git init -b master Create Git repository git add . Add all files in current directory to commit set git commit -m \"initial commit\" Commit changes to local repository gh repo create fablab_test --push --public --source ./ Create GitHub repository and push local repository to GitHub mkdir docs/assignments Create directory for MkDocs web-page echo \"# 1. Hello World\" > docs/assignments/week01.md Add Hello World MkDocs web-page git add . Add docs/assignments/week01.md to commit set git commit -m \"add week 1\" Commit changes to local repository git status Check git repository status. It says it has one commit more than remote repository. git push Synch changes from local to remote repository. git reset --hard HEAD~1 Remove most recent commit from local repository git fetch Download changes from remote repository. git status Check git repository status. It says local has one commit less than remote repository. git pull Add changes from remote to local repository. git status It says local repository is same than remote. gh repo delete fablab_test Delete test GitHub repository","title":"Git / GitHub process"},{"location":"assignments/week02/#creating-website","text":"MkDocs is the web page generation tool I use. Its operation is based on the generation of static web pages from code written in Markdown markup language. Markdown, on the other hand, is a very simple language in syntax. A document written with Markdown is easy to read and write with just a text editor. MkDocs converts documents written with Markdown to html format, which is used on web pages. I had no previous experience with MkDocs, so it felt easy to try the Fab Academy template provided. The template was simple, including in practically a blank page for each week. After learning the basics I removed all the extra weeks as I will add them as I do them. MkDocs uses a directory structure to specify the layout of a site. You can see that in this case as ./docs/assignments/ directory forms a section on your site called Assignments . All the public documentation files must go under ./docs/ directory, root ./ has only configuration file. Site public pages must have a .md file extension, which is then converted to html by MkDocs. The directory structure of the site looks like this. . \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 assignments \u2502 \u2502 \u251c\u2500\u2500 week01.md \u2502 \u2502 \u2514\u2500\u2500 week02.md \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u251c\u2500\u2500 week01 \u2502 \u2502 \u2502 \u251c\u2500\u2500 directory \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 file.img \u2502 \u2502 \u2502 \u2514\u2500\u2500 file.img \u2502 \u2502 \u2514\u2500\u2500 week02 \u2502 \u2502 \u2514\u2500\u2500 file.img \u2502 \u2514\u2500\u2500 index.md \u2514\u2500\u2500 mkdocs.yml The configuration file mkdocs.yml had a lot of settings and add-ons that I didn't need, so I generated a new configuration file with the mkdocs new command. The only extension I used was markdown_extensions: extra because I used the html tag it provides for the image caption tag. I deleted it later because I started using tables to add images and caption. I try to avoid adding anything extra, staying as default MkDocs as possible if there is no compelling need. The configuration file is so simple. You can add a lot of stuff there if needed. I\u2019ll probably add some css style or something to change the background color of the tables from gray to white. site_name: Fab Lab Oulu Student Blog theme: name: material I test pages written with Markdown locally on the machine using the mkdocs serve command. I save the changes to the local git and from there upload them to the GitHub Pages service with the mkdocs gh-deploy command and the git push command to the GitHub remote repository. So all-in-all, whole toolchain behind the site is: MkDocs Material for MkDocs Git GitHub GitHub Pages","title":"Creating website"},{"location":"assignments/week03/","text":"3. Computer-Aided Design Assignment Evaluate and select your 2D and 3D software. I recommend Inkscape, GIMP and Fusion 360. Demonstrate and describe your own processes used in modelling with 2D and 3D software eg. 2D raster, 2D vector and 3D modelling processes. Model (raster, vector, 2D, 3D, render, animate, simulate, ...) a possible final project, compress your images and videos, and post it on your class page. Include your design files as original and common formats (jpg, dwg, stl). This week task was to study and evaluate different design tools - raster, vector, 2D and 3D. My personal needs are mostly 3D design so I did more testing and evaluation on that side. Selected design tools are: GIMP, Inkscape and FreeCAD. GIMP Basic picture editing tool selected was simply GIMP (GNU Image Manipulation Program). I have used it earlier, it comes with Linux distribution used and it does the job. I think I don't even need it much during these courses. GIMP is a program for processing pixel / raster images. Images in this format are saved as 2-dimensional array of pixels in the file. Typically, images displayed in pixel format are images like a photos with a lot of details. Scaling images in this format is a bit problematic, especially when it is enlarged by duplicating the pixels, which makes the image looking softer, for example, 4x magnification creates 4 new pixels by cloning single original pixel. I drew a simple picture in a test sense. I started the app, added a new drawing (File->New...). I selected the drawing tool \"Tools->Paint Tools->Pencil\", then resized the pen from the menu on the left (Size: 20). I used the mouse to draw the image below. I wanted to try a transparent background so I added an Alpha channel (Layer->Transparency->Add Alpha Channel). I selected a white background that I wanted to make transparent with the \"Select->By Color\" tool and pressed the \"Del\" button to remove it. After that, the background became transparent. Finally, I saved the file. GIMP sudo dnf install gimp \"Hello GIMP\", which I drew. The background is transparent, so it shows the color of the cell. Popular raster/pixel image formats Some of the very popular raster / pixel image formats are JPEG, GIF, PNG and TIFF. GIF and PNG are pretty similar, PNG is kind of an improved version of GIF. The biggest practical technical differences between these are transparency and support for animations. PNG, unlike GIF, supports the so-called Alpha channel, which can be used to define transparency. GIF, on the other hand, supports animations that are not supported in PNG. Both are lossless formats, unlike JPEG. JPEG is the most popular \"photo\" format. It uses lossy compression to achieve a small image file size, but the downside is the data lost from the image. Due to the compression method, it is well suited for applications where the image is viewed with the human eye, as the human eye does not distinguish small removed details. For technical use, for example for drawings with lines, it is often not very useful due to the lossy packaging. TIFF is a lossless format. It is widely used in the processing of raw photographs. The format can be considered as a format for image processing professionals. TIFF files are often really large, so they are not used to display images on web pages, for example, but are converted to a lossy JPEG format before publication. XCF is the native file format used by GIMP. It's not a very interchangeable format, but it's a good idea to stick to this format when using GIMP. GIMP can export an image in many formats, so you can transfer it to other programs when necessary. Inkscape Inkscape is a vector graphics editor I selected. It was natural choice as it was available from my OS package manager and it is rather feature rich. I am not sure how much I will need that kind of 2D vector graphic design tool still - probably for the laser cutter at least. Vector graphics are a way of modeling an image in which the image is treated as lines, or mathematically called vectors. For example, a square can be expressed as 4 lines with length, direction, and coordinates. Thus, expressed as vectors, an image can be scaled indefinitely without sacrificing its accuracy. Vector graphics are well suited for mechanical drawings with a lot of straight edges and geometry, but are not suitable for displaying irregular images such as photographs. Because of these geometric properties, the format is widely used as a file format for various computer-controlled cutters. As a test, I quickly draw simple half wave dipole antenna around 1000 MHz (not simulated not even calculated accurate, just a concept). I wonder if it is possible to laser cut that kind of small antennas from few millimeter thick aluminum plate... I drew the image of the antenna with the \"Create rectangles and squares\" tool from many pieces. I defined the dimensions and coordinates (W / H / Rx / Ry) of each piece separately by hand on a millimeter scale. The pieces should have been joined / grouped with some other tools, but I couldn't do it, so they're kind of separate at the moment. I think if the design is tried to cut with some tool it will probably cut all the pieces apart using the border lines. Inkscape sudo dnf install inkscape Dipole antenna in SVG format Popular vector image formats There are quite a few vector graphics file formats, many of which are formats related to a specific computer program. Some of the most common formats are SVG, EPS and AI. SVG is an open format developed by the W3C (World Wide Web Consortium). The format is really common and widely supported, very interchangeable. The format is also supported in browsers directly. Inkscape native format. EPS stands for Encapsulated PostScript. I don't know the format in more detail, and I probably won't use it if there is no special need. Inkscape supports the format, but Firefox didn't seem to know it. AI is a file format used by Adobe. It is a very popular format because Adobe programs are popular with image processing professionals. Inkscape can't save in AI format so I'm probably not going to use it. FreeCAD 3D design tool is one I likely need most. Here I evaluated Fusion 360 and FreeCAD. I had too much problems with Fusion 360. Firstly, Fusion 360 does not have Linux version and secondly that mess about user account. I tried it with Wine (Windows API implementation for Linux) but not very great results. It worked somehow, but feeling was a bit buggy. Also registration for Autodesk in order to get license was a bit tricky and you have to send some proofs (like picture of student id) in order to get education license. And for some reason it still started 30 days trial version of Fusion 360 even \"You\u2019re eligible for free one-year educational access to Autodesk products through the Autodesk Education Community.\". So I eventually switched to FreeCAD. My only earlier experience of 3D modeling I had was some experience modelling antennas using CST Studio. FreeCAD feels totally different which means learning curve will be rather heavy. After looking some tutorials from YouTube I was finally able to made simple design. It wasn't any part for my final project, but something useful still - it is cover plate for light switch. I need that as I have replaced manual light switches with smart ones that are controlled via home automation. 3D design made was build from 4 different blocks. All blocks were first drawn as 2D sketch (FreeCAD Sketcher workbench) and then converted to 3D model. First block was \"Pad\" which covers outlines of whole part. Then rest of three blocks were \"Pocket\" which are then removed from the Pad by boolean style operation. For each 2D sketch, I defined shapes with constrains - corner roundings, border lengths and symmetry around the origin. FreeCAD FreeCAD Sketcher Workbench, 2D drawing sudo dnf install freecad FreeCAD file formats FCStd is a native file format for FreeCAD. It makes sense to stay in this format as long as you make design with the program. The format is not very compatible with other programs. When making a product from the 3D model, the drawings must be transferred to a format suitable for the manufacturing tool. When cutting parts of a 3D model, you typically want to convert the model to some 2D vector format, like SVG. When printing a design with a 3D printer, the model must be converted to one of the printable 3D formats, which is very often STL. FreeCAD supports a wide variety of file formats . Files hello_gimp.xcf hello_gimp.png dipole antenna.svg ABB Cover frame Jussi Impressivo.FCStd ABB Cover frame Jussi Impressivo.stl","title":"3. Computer-Aided Design"},{"location":"assignments/week03/#3-computer-aided-design","text":"","title":"3. Computer-Aided Design"},{"location":"assignments/week03/#assignment","text":"Evaluate and select your 2D and 3D software. I recommend Inkscape, GIMP and Fusion 360. Demonstrate and describe your own processes used in modelling with 2D and 3D software eg. 2D raster, 2D vector and 3D modelling processes. Model (raster, vector, 2D, 3D, render, animate, simulate, ...) a possible final project, compress your images and videos, and post it on your class page. Include your design files as original and common formats (jpg, dwg, stl). This week task was to study and evaluate different design tools - raster, vector, 2D and 3D. My personal needs are mostly 3D design so I did more testing and evaluation on that side. Selected design tools are: GIMP, Inkscape and FreeCAD.","title":"Assignment"},{"location":"assignments/week03/#gimp","text":"Basic picture editing tool selected was simply GIMP (GNU Image Manipulation Program). I have used it earlier, it comes with Linux distribution used and it does the job. I think I don't even need it much during these courses. GIMP is a program for processing pixel / raster images. Images in this format are saved as 2-dimensional array of pixels in the file. Typically, images displayed in pixel format are images like a photos with a lot of details. Scaling images in this format is a bit problematic, especially when it is enlarged by duplicating the pixels, which makes the image looking softer, for example, 4x magnification creates 4 new pixels by cloning single original pixel. I drew a simple picture in a test sense. I started the app, added a new drawing (File->New...). I selected the drawing tool \"Tools->Paint Tools->Pencil\", then resized the pen from the menu on the left (Size: 20). I used the mouse to draw the image below. I wanted to try a transparent background so I added an Alpha channel (Layer->Transparency->Add Alpha Channel). I selected a white background that I wanted to make transparent with the \"Select->By Color\" tool and pressed the \"Del\" button to remove it. After that, the background became transparent. Finally, I saved the file. GIMP sudo dnf install gimp \"Hello GIMP\", which I drew. The background is transparent, so it shows the color of the cell.","title":"GIMP"},{"location":"assignments/week03/#popular-rasterpixel-image-formats","text":"Some of the very popular raster / pixel image formats are JPEG, GIF, PNG and TIFF. GIF and PNG are pretty similar, PNG is kind of an improved version of GIF. The biggest practical technical differences between these are transparency and support for animations. PNG, unlike GIF, supports the so-called Alpha channel, which can be used to define transparency. GIF, on the other hand, supports animations that are not supported in PNG. Both are lossless formats, unlike JPEG. JPEG is the most popular \"photo\" format. It uses lossy compression to achieve a small image file size, but the downside is the data lost from the image. Due to the compression method, it is well suited for applications where the image is viewed with the human eye, as the human eye does not distinguish small removed details. For technical use, for example for drawings with lines, it is often not very useful due to the lossy packaging. TIFF is a lossless format. It is widely used in the processing of raw photographs. The format can be considered as a format for image processing professionals. TIFF files are often really large, so they are not used to display images on web pages, for example, but are converted to a lossy JPEG format before publication. XCF is the native file format used by GIMP. It's not a very interchangeable format, but it's a good idea to stick to this format when using GIMP. GIMP can export an image in many formats, so you can transfer it to other programs when necessary.","title":"Popular raster/pixel image formats"},{"location":"assignments/week03/#inkscape","text":"Inkscape is a vector graphics editor I selected. It was natural choice as it was available from my OS package manager and it is rather feature rich. I am not sure how much I will need that kind of 2D vector graphic design tool still - probably for the laser cutter at least. Vector graphics are a way of modeling an image in which the image is treated as lines, or mathematically called vectors. For example, a square can be expressed as 4 lines with length, direction, and coordinates. Thus, expressed as vectors, an image can be scaled indefinitely without sacrificing its accuracy. Vector graphics are well suited for mechanical drawings with a lot of straight edges and geometry, but are not suitable for displaying irregular images such as photographs. Because of these geometric properties, the format is widely used as a file format for various computer-controlled cutters. As a test, I quickly draw simple half wave dipole antenna around 1000 MHz (not simulated not even calculated accurate, just a concept). I wonder if it is possible to laser cut that kind of small antennas from few millimeter thick aluminum plate... I drew the image of the antenna with the \"Create rectangles and squares\" tool from many pieces. I defined the dimensions and coordinates (W / H / Rx / Ry) of each piece separately by hand on a millimeter scale. The pieces should have been joined / grouped with some other tools, but I couldn't do it, so they're kind of separate at the moment. I think if the design is tried to cut with some tool it will probably cut all the pieces apart using the border lines. Inkscape sudo dnf install inkscape Dipole antenna in SVG format","title":"Inkscape"},{"location":"assignments/week03/#popular-vector-image-formats","text":"There are quite a few vector graphics file formats, many of which are formats related to a specific computer program. Some of the most common formats are SVG, EPS and AI. SVG is an open format developed by the W3C (World Wide Web Consortium). The format is really common and widely supported, very interchangeable. The format is also supported in browsers directly. Inkscape native format. EPS stands for Encapsulated PostScript. I don't know the format in more detail, and I probably won't use it if there is no special need. Inkscape supports the format, but Firefox didn't seem to know it. AI is a file format used by Adobe. It is a very popular format because Adobe programs are popular with image processing professionals. Inkscape can't save in AI format so I'm probably not going to use it.","title":"Popular vector image formats"},{"location":"assignments/week03/#freecad","text":"3D design tool is one I likely need most. Here I evaluated Fusion 360 and FreeCAD. I had too much problems with Fusion 360. Firstly, Fusion 360 does not have Linux version and secondly that mess about user account. I tried it with Wine (Windows API implementation for Linux) but not very great results. It worked somehow, but feeling was a bit buggy. Also registration for Autodesk in order to get license was a bit tricky and you have to send some proofs (like picture of student id) in order to get education license. And for some reason it still started 30 days trial version of Fusion 360 even \"You\u2019re eligible for free one-year educational access to Autodesk products through the Autodesk Education Community.\". So I eventually switched to FreeCAD. My only earlier experience of 3D modeling I had was some experience modelling antennas using CST Studio. FreeCAD feels totally different which means learning curve will be rather heavy. After looking some tutorials from YouTube I was finally able to made simple design. It wasn't any part for my final project, but something useful still - it is cover plate for light switch. I need that as I have replaced manual light switches with smart ones that are controlled via home automation. 3D design made was build from 4 different blocks. All blocks were first drawn as 2D sketch (FreeCAD Sketcher workbench) and then converted to 3D model. First block was \"Pad\" which covers outlines of whole part. Then rest of three blocks were \"Pocket\" which are then removed from the Pad by boolean style operation. For each 2D sketch, I defined shapes with constrains - corner roundings, border lengths and symmetry around the origin. FreeCAD FreeCAD Sketcher Workbench, 2D drawing sudo dnf install freecad","title":"FreeCAD"},{"location":"assignments/week03/#freecad-file-formats","text":"FCStd is a native file format for FreeCAD. It makes sense to stay in this format as long as you make design with the program. The format is not very compatible with other programs. When making a product from the 3D model, the drawings must be transferred to a format suitable for the manufacturing tool. When cutting parts of a 3D model, you typically want to convert the model to some 2D vector format, like SVG. When printing a design with a 3D printer, the model must be converted to one of the printable 3D formats, which is very often STL. FreeCAD supports a wide variety of file formats .","title":"FreeCAD file formats"},{"location":"assignments/week03/#files","text":"hello_gimp.xcf hello_gimp.png dipole antenna.svg ABB Cover frame Jussi Impressivo.FCStd ABB Cover frame Jussi Impressivo.stl","title":"Files"},{"location":"assignments/week04/","text":"4. Computer controlled cutting Weekly task This week went training with vinyl cutter and laser cutter and related design software. We started studying vinyl cutter basics and after that did the same with laser cutter. Most of the time went still learning laser cutting as that process is more complex starting from the 3D-modelling process. Vinyl cutting Vinyl cutter is a printer look-a-like machine that has a small knife in order to cut rather thin and soft material. Typically that material is just vinyl tape which is cut to some stickers. Used vinyl cutter was Roland CAMM-1 GS-24 and it is controlled by Windows workstation. Roland CAMM-1 GS-24 vinyl cutter Usually cutter is connected to computer like a printer using printer driver made for the device. So instead of printing, it will cut. Printed document needs to be converted into vector format. Line width didn't seem to have any requirement at our test, it just cuts where the line of the center line was. Anyhow, printer driver API is for printers and does not fit 100% well with other use cases like that, so be warned there may be device vendor specific tricks which are varying from manufacturer to other and so. Sticker As a vinyl cutting exercise I made some Pokemon Go Team Valor logo stickers. I downloaded suitable existing logo which was a red colored raster image on transparent background in .png format. Then I used Inkscape Trace Bitmap tool to the logo in order to get vector image with borders. Vector image was then cut by using vinyl cutter. Here is the original image of the used Valor logo Valor stickers Valor sticker installation I made on workroom door \"Edge detection\" method ended up with unwanted results because it made double line borders. I think it could be caused by the smooth borders of the original photo. First I removed those duplicate lines manually, which was pretty much work. I eventually decided to test other trace algorithms as Inkscape supports very many of them - 5 for single scan and 4 for multiple scans. I found that \"Edge detection\" and \"Autotrace\" methods make pretty good looking traces for my logo image. I used default parameters for both of those tracing algorithms and finally vinyl cut few pieces of logos for each used tracing algorithm. There was not big difference in the result between both algorithms. Cutter; Turn power on Cutter; Open vinyl load lever, located back left Cutter; Insert large enough piece of vinyl Cutter; Close vinyl load lever, located back left Cutter; Set left and right rollers. Those need to be on white markings. Roller locations are used to detect the width of the cut area. Cutter; Select \"PIECE\" from \"SELECT SHEET\" cutter menu. There is some other material options available too like \"ROLL\", but for small cutting \"PIECE\" is enough. Piece means small piece of material, cutter measures height automatically and width is taken automatically from roller locations. Inkscape; Open your vector design file Inkscape; Open \"Extensions -> Roland CutStudio\". This extension is installed on our fab lab workstation. It opens CutStudio with your design from Inkscape. CutStudio; File -> Cutting Setup... Get sheet size from the cutter \"Get From machine\". It should show same size you can see on vinyl cutter screen CutStudio; Scale your drawing to fit vinyl sheet size and set drawing position on sheet. Also you could for example clone it or do other tricks needed before cutting. CutStudio; File -> Cutting... in order to physical cut operation. After cutting is finished vinyl can be removed from the cutter. Firstly it is better to move cutting head to parking position from the cutter setting in order to get more room to work. Then release load lever and remove vinyl. It should then manually remove those unneeded parts from the vinyl and for that job you may need scissors, needle or tweezers, especially if cutting contains very small vinyl parts. After all the unneeded parts are removed you need to add adhesive transfer sheet in order to place vinyl sticker to final position. Select sheet type Sheet size detected by the cutter with PIECE setting Get sheet size from cutter Inkscape launch CutStudio Roland CutStudio Peeling vinyl tape Laser cutting Kerf Kerf is term for \"extra\" material removed by the cutting process itself. On ideal case cutting process does nothing but cuts your material as desired, but in real life there is very often mechanical or some other process that removes material. That is for example saw blade or laser beam. So if your saw blade is 1mm wide it will remove that much material and it is said that 1mm kerf is removed. Same applies for laser beam too as it burns material during cutting process. Kerf should be taken into account when that small amounts of extra removed material is essential. Kerf test for Acrylic 3mm I ran test for 3mm Acrylic plate. I got two different results depending how I ordered those 10 small pieces. Laser beam cut/kerf is not constant - it is wider on top side and a little bit smaller on bottom side. Larger calculated kerf is gotten when every other piece is upside-down and it is about double the size of compared to another. Larger kerf value, 0.136mm, seems to be more realistic in real life in that case. >> (100-99.45)/10 ans = 0.055000 >> (100-98.64)/10 ans = 0.13600 Kerf 0.055mm Kerf 0.136mm Focus test Some tests were made how focus effects to cutting. +/-2mm and +/-4mm offsets were tested to plywood. Laser is usually calibrated so that most of the power is on focus. Due to that, the more the material is off from the focus the less the power it gets. 4mm offset with used settings caused it does not cut through anymore on one test. Focus test Power, frequency, speed tests Then we tested how different laser parameters effects to cut and engrave. All these 3 parameters have some relation to operation result. If you for example decrease power you can/should also decrease speed in order to succeed the same thickness in the material cut. Test plate shows how increased speed eventually fails cut. On test plate you can see the same happens for decreased power too. Power, frequency, speed tests DPI test Laser DPI test was made for 150, 300 and 600 DPI resolutions. Result is that 150DPI burns less material and 600DPI the most, which is expected. It is because bigger the resolution the more there is overlapping burned points by laser beam. As we calculated Kerf, for 3mm vinyl, upper side, it was 0.136mm. So lets assume that this is beam width and it is same for MDF (~rough estimate). DPI is shorthand for Dots Per Inch. Inch is 2.54cm => 25.4mm. >> 2.54*10/0.136 ans = 186.76 >> 600/186.76 ans = 3.2127 So calculating maximum DPI from that kerf value we got 186.76 DPI. And in all points after that gets lasered multiple times / overlapping and due to that burns more material. 600DPI means every single point is burned roughly 3.2 times (hope calculations about are correct). DPI test 3D model of simple block I used FreeCAD to design simple brick having 4 joints, one for each side. I saw this kind of pieces on lab so I decided to go where it was easiest. First I made 2D sketch on FreeCAD. Then I drew outline of part using polyline tool on sketcher [toolbar or Sketch -> Sketcher geometries -> Create polyline]. After that I added constraint for horizontal and vertical lines and then symmetry around center point of XY-plane. Then I added equal length constraint of all similar length lines. And finally parametrized that slot width. FreeCAD Sketcher Spreadsheet is created for the kerf and material thickness parameters. It may be a bit overkill for this small design but parametric design principles were required so here it is in all flavors. Technically, that FreeCAD spreadsheet contains formula slotwidth = thickness - kerf, which can be seen on picture. Parameter 'slotwidth' from spreadsheet is used on sketch to define slot width for one slot. Other 3 slots on the sketch are set same size as constraint so same value propagates that way to all slots on design. FreeCAD Spreadsheet FreeCAD parametric design It was somehow difficult to export sketch or 3D model outlines as vector format needed for laser cutter. On ideal case you just need to save/export it in some format and that's all - but it is far from that. The way I did it was that I made FreeCAD TehcnicalDrawing from part and exported it as a .svg (small button on bar, hardly visible on attached picture). After that you can edit it on Inkscape, change line width to 0.02mm required by laser (if line width is too large laser refuses and does error beep). From Inkscape save drawing as a .pdf and use laser printer workstation to print it. I still wonder if there could be a better tool chain to do all these tasks a bit more automatically. FreeCAD TechDraw FreeCAD 3D model Download design: block.FCStd block.stl block.pdf Laser cutting Laser used was Epilog Fusion M2 40. 3D model from FreeCAD was imported to laser using following steps: Design workstation; Export FreeCAD Technical Drawing to vector format .svg Design workstation; Import .svg to Inkscape Design workstation; Edit line width to 0.02mm and check outlines Design workstation; Save as .pdf Laser cutter; turn on (air intake on, air outlet on, laser power on) Laser workstation; Open .pdf Laser workstation; Select printer and edit printer (laser) settings Laser workstation; Load correct laser settings per material used (you should not need to define your own settings as there is existing settings for most common materials) Laser workstation; Send printer work to laser Laser cutter; JOG. Interface for positioning laser head to given point, for example setting starting point for your laser cut (top-left corner). There is red laser pointer showing exact point, use joystick to adjust. Laser cutter; FOCUS. Interface for moving laser cutter bed up and down. Used for adjusting distance between laser beam and material, there is mechanical triangle tool on laser for setting correct distance. Laser cutter; JOB. That's is printing document queue received by the laser machine. Select your job - it is likely the last one. Laser cutter; GO. Start cutting. Laser cutter; Wait 1 minute or so after laser is finished before opening the lid. That's in order to get all burning products like dangerous smoke to get removed from the machine. Unfortunately there is very many things you can do wrong. One must be very careful with safety issues when working with laser cutter. Always do the basic checks mentioned on many places near laser (air intake, air outlet) and check the material compatibility. Check where the fire blanket is and make a plan in your head what you would do if it starts burning before you start cutting. Laser cut blocks in random configuration. If something useful is needed then these blocks can be reconfigured as a kettle base :-) Set of Blocks... Design files Valor logo autotrace.svg Valor logo brightness_cutoff.svg block.FCStd block.stl block.pdf Summary TOO MUCH WORK. This week was terrible amount of things. Something should be reduced. I would reduce the documentation and focus more on learning.","title":"4. Computer controlled cutting"},{"location":"assignments/week04/#4-computer-controlled-cutting","text":"","title":"4. Computer controlled cutting"},{"location":"assignments/week04/#weekly-task","text":"This week went training with vinyl cutter and laser cutter and related design software. We started studying vinyl cutter basics and after that did the same with laser cutter. Most of the time went still learning laser cutting as that process is more complex starting from the 3D-modelling process.","title":"Weekly task"},{"location":"assignments/week04/#vinyl-cutting","text":"Vinyl cutter is a printer look-a-like machine that has a small knife in order to cut rather thin and soft material. Typically that material is just vinyl tape which is cut to some stickers. Used vinyl cutter was Roland CAMM-1 GS-24 and it is controlled by Windows workstation. Roland CAMM-1 GS-24 vinyl cutter Usually cutter is connected to computer like a printer using printer driver made for the device. So instead of printing, it will cut. Printed document needs to be converted into vector format. Line width didn't seem to have any requirement at our test, it just cuts where the line of the center line was. Anyhow, printer driver API is for printers and does not fit 100% well with other use cases like that, so be warned there may be device vendor specific tricks which are varying from manufacturer to other and so.","title":"Vinyl cutting"},{"location":"assignments/week04/#sticker","text":"As a vinyl cutting exercise I made some Pokemon Go Team Valor logo stickers. I downloaded suitable existing logo which was a red colored raster image on transparent background in .png format. Then I used Inkscape Trace Bitmap tool to the logo in order to get vector image with borders. Vector image was then cut by using vinyl cutter. Here is the original image of the used Valor logo Valor stickers Valor sticker installation I made on workroom door \"Edge detection\" method ended up with unwanted results because it made double line borders. I think it could be caused by the smooth borders of the original photo. First I removed those duplicate lines manually, which was pretty much work. I eventually decided to test other trace algorithms as Inkscape supports very many of them - 5 for single scan and 4 for multiple scans. I found that \"Edge detection\" and \"Autotrace\" methods make pretty good looking traces for my logo image. I used default parameters for both of those tracing algorithms and finally vinyl cut few pieces of logos for each used tracing algorithm. There was not big difference in the result between both algorithms. Cutter; Turn power on Cutter; Open vinyl load lever, located back left Cutter; Insert large enough piece of vinyl Cutter; Close vinyl load lever, located back left Cutter; Set left and right rollers. Those need to be on white markings. Roller locations are used to detect the width of the cut area. Cutter; Select \"PIECE\" from \"SELECT SHEET\" cutter menu. There is some other material options available too like \"ROLL\", but for small cutting \"PIECE\" is enough. Piece means small piece of material, cutter measures height automatically and width is taken automatically from roller locations. Inkscape; Open your vector design file Inkscape; Open \"Extensions -> Roland CutStudio\". This extension is installed on our fab lab workstation. It opens CutStudio with your design from Inkscape. CutStudio; File -> Cutting Setup... Get sheet size from the cutter \"Get From machine\". It should show same size you can see on vinyl cutter screen CutStudio; Scale your drawing to fit vinyl sheet size and set drawing position on sheet. Also you could for example clone it or do other tricks needed before cutting. CutStudio; File -> Cutting... in order to physical cut operation. After cutting is finished vinyl can be removed from the cutter. Firstly it is better to move cutting head to parking position from the cutter setting in order to get more room to work. Then release load lever and remove vinyl. It should then manually remove those unneeded parts from the vinyl and for that job you may need scissors, needle or tweezers, especially if cutting contains very small vinyl parts. After all the unneeded parts are removed you need to add adhesive transfer sheet in order to place vinyl sticker to final position. Select sheet type Sheet size detected by the cutter with PIECE setting Get sheet size from cutter Inkscape launch CutStudio Roland CutStudio Peeling vinyl tape","title":"Sticker"},{"location":"assignments/week04/#laser-cutting","text":"","title":"Laser cutting"},{"location":"assignments/week04/#kerf","text":"Kerf is term for \"extra\" material removed by the cutting process itself. On ideal case cutting process does nothing but cuts your material as desired, but in real life there is very often mechanical or some other process that removes material. That is for example saw blade or laser beam. So if your saw blade is 1mm wide it will remove that much material and it is said that 1mm kerf is removed. Same applies for laser beam too as it burns material during cutting process. Kerf should be taken into account when that small amounts of extra removed material is essential.","title":"Kerf"},{"location":"assignments/week04/#kerf-test-for-acrylic-3mm","text":"I ran test for 3mm Acrylic plate. I got two different results depending how I ordered those 10 small pieces. Laser beam cut/kerf is not constant - it is wider on top side and a little bit smaller on bottom side. Larger calculated kerf is gotten when every other piece is upside-down and it is about double the size of compared to another. Larger kerf value, 0.136mm, seems to be more realistic in real life in that case. >> (100-99.45)/10 ans = 0.055000 >> (100-98.64)/10 ans = 0.13600 Kerf 0.055mm Kerf 0.136mm","title":"Kerf test for Acrylic 3mm"},{"location":"assignments/week04/#focus-test","text":"Some tests were made how focus effects to cutting. +/-2mm and +/-4mm offsets were tested to plywood. Laser is usually calibrated so that most of the power is on focus. Due to that, the more the material is off from the focus the less the power it gets. 4mm offset with used settings caused it does not cut through anymore on one test. Focus test","title":"Focus test"},{"location":"assignments/week04/#power-frequency-speed-tests","text":"Then we tested how different laser parameters effects to cut and engrave. All these 3 parameters have some relation to operation result. If you for example decrease power you can/should also decrease speed in order to succeed the same thickness in the material cut. Test plate shows how increased speed eventually fails cut. On test plate you can see the same happens for decreased power too. Power, frequency, speed tests","title":"Power, frequency, speed tests"},{"location":"assignments/week04/#dpi-test","text":"Laser DPI test was made for 150, 300 and 600 DPI resolutions. Result is that 150DPI burns less material and 600DPI the most, which is expected. It is because bigger the resolution the more there is overlapping burned points by laser beam. As we calculated Kerf, for 3mm vinyl, upper side, it was 0.136mm. So lets assume that this is beam width and it is same for MDF (~rough estimate). DPI is shorthand for Dots Per Inch. Inch is 2.54cm => 25.4mm. >> 2.54*10/0.136 ans = 186.76 >> 600/186.76 ans = 3.2127 So calculating maximum DPI from that kerf value we got 186.76 DPI. And in all points after that gets lasered multiple times / overlapping and due to that burns more material. 600DPI means every single point is burned roughly 3.2 times (hope calculations about are correct). DPI test","title":"DPI test"},{"location":"assignments/week04/#3d-model-of-simple-block","text":"I used FreeCAD to design simple brick having 4 joints, one for each side. I saw this kind of pieces on lab so I decided to go where it was easiest. First I made 2D sketch on FreeCAD. Then I drew outline of part using polyline tool on sketcher [toolbar or Sketch -> Sketcher geometries -> Create polyline]. After that I added constraint for horizontal and vertical lines and then symmetry around center point of XY-plane. Then I added equal length constraint of all similar length lines. And finally parametrized that slot width. FreeCAD Sketcher Spreadsheet is created for the kerf and material thickness parameters. It may be a bit overkill for this small design but parametric design principles were required so here it is in all flavors. Technically, that FreeCAD spreadsheet contains formula slotwidth = thickness - kerf, which can be seen on picture. Parameter 'slotwidth' from spreadsheet is used on sketch to define slot width for one slot. Other 3 slots on the sketch are set same size as constraint so same value propagates that way to all slots on design. FreeCAD Spreadsheet FreeCAD parametric design It was somehow difficult to export sketch or 3D model outlines as vector format needed for laser cutter. On ideal case you just need to save/export it in some format and that's all - but it is far from that. The way I did it was that I made FreeCAD TehcnicalDrawing from part and exported it as a .svg (small button on bar, hardly visible on attached picture). After that you can edit it on Inkscape, change line width to 0.02mm required by laser (if line width is too large laser refuses and does error beep). From Inkscape save drawing as a .pdf and use laser printer workstation to print it. I still wonder if there could be a better tool chain to do all these tasks a bit more automatically. FreeCAD TechDraw FreeCAD 3D model","title":"3D model of simple block"},{"location":"assignments/week04/#download-design","text":"block.FCStd block.stl block.pdf","title":"Download design:"},{"location":"assignments/week04/#laser-cutting_1","text":"Laser used was Epilog Fusion M2 40. 3D model from FreeCAD was imported to laser using following steps: Design workstation; Export FreeCAD Technical Drawing to vector format .svg Design workstation; Import .svg to Inkscape Design workstation; Edit line width to 0.02mm and check outlines Design workstation; Save as .pdf Laser cutter; turn on (air intake on, air outlet on, laser power on) Laser workstation; Open .pdf Laser workstation; Select printer and edit printer (laser) settings Laser workstation; Load correct laser settings per material used (you should not need to define your own settings as there is existing settings for most common materials) Laser workstation; Send printer work to laser Laser cutter; JOG. Interface for positioning laser head to given point, for example setting starting point for your laser cut (top-left corner). There is red laser pointer showing exact point, use joystick to adjust. Laser cutter; FOCUS. Interface for moving laser cutter bed up and down. Used for adjusting distance between laser beam and material, there is mechanical triangle tool on laser for setting correct distance. Laser cutter; JOB. That's is printing document queue received by the laser machine. Select your job - it is likely the last one. Laser cutter; GO. Start cutting. Laser cutter; Wait 1 minute or so after laser is finished before opening the lid. That's in order to get all burning products like dangerous smoke to get removed from the machine. Unfortunately there is very many things you can do wrong. One must be very careful with safety issues when working with laser cutter. Always do the basic checks mentioned on many places near laser (air intake, air outlet) and check the material compatibility. Check where the fire blanket is and make a plan in your head what you would do if it starts burning before you start cutting. Laser cut blocks in random configuration. If something useful is needed then these blocks can be reconfigured as a kettle base :-) Set of Blocks...","title":"Laser cutting"},{"location":"assignments/week04/#design-files","text":"Valor logo autotrace.svg Valor logo brightness_cutoff.svg block.FCStd block.stl block.pdf","title":"Design files"},{"location":"assignments/week04/#summary","text":"TOO MUCH WORK. This week was terrible amount of things. Something should be reduced. I would reduce the documentation and focus more on learning.","title":"Summary"},{"location":"assignments/week05/","text":"5. Invention, intellectual property and income Dissemination plan My final project plan is currently outdoor weather station with great amount of sensors. There has been that kind of weather stations for ages, which means basic concept is nothing new nor novel. I think most innovations on that field has been long time only on sensor technology. Developing new type of sensors is sure out of scope at this course in every dimension - it is almost always a lot of signal processing and mathematics. My plan is just make robust weather station, for extreme Finnish winter conditions down to -55 Celsius degrees, that can be extended later using existing sensors. Whole project is just a hobby project without any commercial interest. Anyhow, it could be interesting if it can be made such simple, feature rich, modular, extendable and pretty cheap \"reference\" package which other hobbyists can use and develop further. Project will be very likely hosted on GitHub. GitHub offers both version control and www-pages on same integrated platform and it is biggest site for that kind of open source projects having very large user space. Licenses I think, as a hobby project without any commercial interest, it is better to license it as open as possible with less restriction to encourage people to play with it and develop further. Looking those Creative Commons licenses I eventually ended up to most open and permissive CC0 license. Another very suitable license could be CC BY 4.0. CC0 license is selected for all the other things except software. For software there is multiple suitable popular open source licenses; GNU GPL, Apache, MIT, etc. All those are pretty similar and fits well project like that. I decided to choose MIT License. Licenses are: CC0 and MIT. Slide presentation.png Video At this point of Fab Lab courses I really don't have basically any material manufacturing the final project. Due to that video is just a place holder at the moment. presentation.mp4","title":"5. Invention, intellectual property and income"},{"location":"assignments/week05/#5-invention-intellectual-property-and-income","text":"","title":"5. Invention, intellectual property and income"},{"location":"assignments/week05/#dissemination-plan","text":"My final project plan is currently outdoor weather station with great amount of sensors. There has been that kind of weather stations for ages, which means basic concept is nothing new nor novel. I think most innovations on that field has been long time only on sensor technology. Developing new type of sensors is sure out of scope at this course in every dimension - it is almost always a lot of signal processing and mathematics. My plan is just make robust weather station, for extreme Finnish winter conditions down to -55 Celsius degrees, that can be extended later using existing sensors. Whole project is just a hobby project without any commercial interest. Anyhow, it could be interesting if it can be made such simple, feature rich, modular, extendable and pretty cheap \"reference\" package which other hobbyists can use and develop further. Project will be very likely hosted on GitHub. GitHub offers both version control and www-pages on same integrated platform and it is biggest site for that kind of open source projects having very large user space.","title":"Dissemination plan"},{"location":"assignments/week05/#licenses","text":"I think, as a hobby project without any commercial interest, it is better to license it as open as possible with less restriction to encourage people to play with it and develop further. Looking those Creative Commons licenses I eventually ended up to most open and permissive CC0 license. Another very suitable license could be CC BY 4.0. CC0 license is selected for all the other things except software. For software there is multiple suitable popular open source licenses; GNU GPL, Apache, MIT, etc. All those are pretty similar and fits well project like that. I decided to choose MIT License. Licenses are: CC0 and MIT.","title":"Licenses"},{"location":"assignments/week05/#slide","text":"presentation.png","title":"Slide"},{"location":"assignments/week05/#video","text":"At this point of Fab Lab courses I really don't have basically any material manufacturing the final project. Due to that video is just a place holder at the moment. presentation.mp4","title":"Video"},{"location":"assignments/week06/","text":"6. Electronics production Assignment Individual assignment make an in-circuit programmer by milling and stuffing the PCB https://gitlab.fabcloud.org/pub/programmers/programmer-swd-d11c https://gitlab.fabcloud.org/pub/programmers/programmer-updi-d11c test it, then optionally try other PCB processes Group assignment characterize the design rules for your PCB production process https://mods.cba.mit.edu/ traces interior 1/64\" 0.010\" fiber laser PCB production with Roland MonoFab SRM-20 milling machine Roland MonoFab SRM-20 is rather small desktop CNC milling machine. It is a general purpose milling machine which means it is not the best one for the special purposes like PCB milling though. Anyhow, it could do rather nice PCB milling in cases where PCB area is not very large, PCB is single sided and used traces are relatively wide. It is also quite slow compared to milling machines that are made just for the PCB milling. On the lab I did that \"linetest\" using Roland MonoFab SRM-20. Toolpath traces were generated with \"Mods\" tool https://mods.cba.mit.edu/ . Toolpath generation mods.cba.mit.edu http://academy.cba.mit.edu/classes/electronics_production/linetest.png http://academy.cba.mit.edu/classes/electronics_production/linetest.interior.png Fab Academy linetest.png used on this exercise Fab Academy linetest.interior.png used on this exercise Here is step-by-step screenshots how I generated toolpaths for \"linetest\". Empty workbench. https://mods.cba.mit.edu/ Select \"programs\" Select \"open server program\" Select \"machines->Roland->mill->SRM-20->PCB png\" Milling design tool main view Select \"select png file\" \"linetest.png\" file selected from computer Set tool diameter to 0.25 Change milling machine origin to 0/0/0 Select \"delete\" Delete \"WebSocket device\" module because we don't have network connection on our milling machine. We create \"save file\" module as a replacement. Select \"modules\" Select \"open server module\" Select \"file->save\" Add connection between modules. Red line is new connection. Select \"calculate\" Save Roland SRM-20 toolpath file for traces Select \"select png file\" \"linetest.interior.png\" file selected from computer select \"mill outline (1/32)\" Set tool diameter to 1 Select \"calculate\" Save Roland SRM-20 toolpath file for outline Generated toolpath for traces (linetest.png) Generated toolpath for outline (linetest.interior.png) Modules generally needed to touch when using Mods for PCB milling \"read png\" Basic input file operations, self explaining? \"set PCB defaults\" This module is just to select suitable default values for \"mill raster 2D\" module. Two choices, one for traces and one for outlines. \"mill raster 2D\" This is the most important module. Default settings are pretty good, change if needed. Our lab has for example smaller drill bit for traces than default and larger bit for outlines than default. Change accordingly. Our PCB was FR-1 which is something like 1.6mm substrate and 0.035mm copper or so. Default values fit very well for those PCB thickness, so there is no need to adjust even if those are slightly off. Our lab re-uses LPKF ProtoMat S62 PCB machine milling bits for SRM-20 PCB milling. Especially tracing drill is different as it is V-shaped 0.2mm-0.5mm drill bit. The bigger the cut depth is, the wider the trace will be. I used 0.25mm value for that bit with all the other settings default, which produces very nice cut. Offset number setting means how many rounds drill will run in parallel, the bigger the number the larger area is skinned off from the the copper. Different values can be tested and result seen from \"view toolpath\" module. You may compensate smaller drill by adding more offset, but V-shaped drill bits are not aimed for that so it is better to remove extra copper using more suitable drill bit. \"Roland SRM-20 milling machine\" Module for head positioning. Module \"origin\" should be zeroed as we set origin from machine UI \"VPanel for SRM-20\" in order to avoid \"double\" origin. Those defaults are for a situation where SRM-20 is connected and controlled directly by this \"Mods\" module, but on our case the toolpath is transferred by file. \"jog height\" is the value how much drill is lifted above the Z-origin when transferred (not cut) to different position. Default 2mm is OK, I would say do not decrease. \"home\" is position where head is moved after the milling job is finished. \"save file\" Saves our toolpath to file. \"view toolpath\" Open and see how your calculated toolpath looks. Milling the PCB Machine used was Roland MonoFab SRM-20. Firstly, PCB needs to be attached very well to milling machine bed. PCB has very thin layer of copper which is removed by milling. We are speaking of tolerances about 0.1mm - so attached PCB needs to be very flat! Often PCB is attached to bed using double sided adhesive tape, but we used single side tape for both bed and PCB and used super glue between tapes. Bed and PCB taped Bed and PCB glued VPanel for SRM-20 - Roland MonoFab SRM-20 application UI I transferred linetest toolpath files to VPanel for SRM-20 application which is ran on normal PC workstation. There is few things to do. I need those 2 drill bits, one for traces and one for outline. Insert traces bit first to SRM-20, be careful, don't drop bit. Then set X/Y-origin and finally set Z-origin. Be very careful when setting Z-origin to avoid crashing bit to PCB. Ran drill bit very near to PCB, then open drill bit lock screw in order to drop drill bit to PCB surface. Tighten lock screw. Set Z-origin to that point using VPanel. Move Z-axis upwards to avoid PCB contact after origin is set. Mill traces. Switch to outer line drill bit similar way than earlier when tracing bit was used. Z-origin needs to be set again similarly than earlier - but do not touch X/Y-origin, it should be remain same that outline milling reach correct location. Mill outline. Remove PCB. Milling \"linetest\" PCB I am milling linetest here. Three UPDI or SWD programmer PCBs are already milled as can be seen from those holes on the PCB. linetest PCB is milled linetest PCB Milled PCB looks pretty nice. I am not 100% sure how to interpret that, but it looks like scale is in Inches. So 0.010 * 25.4mm = 0.254mm is that smallest slot machine did. It fits to trace drill bit size, 0.25mm, I used in mods when toolpath was made. Programmer UPDI D11C As a exercise I made Programmer UPDI D11C . We did PCB this time using LPKF ProtoMat S62 PCB milling machine. I had rather much earlier experience from electronics which helps a lot. LPKF ProtoMat S62 PCB milling machine Programmer UPDI D11C PCB Capasitor, 1uF MCU, Atmel SAM D11 4-pin header 6-pin header Voltage regulator, 3.3V Resistor 2 pieces, 4.99k ohm Atmel SAM D11 Soldering UPDI D11C bootloader Our instructor programmed bootloader to my UPDI board chip using SWD programmer. After bootloader installation chip enumerates to USB bus and my Linux workstation detected it as a USB serial device. Flashing bootloader to SAMD11C14 UPDI D11C firmware Finally I programmed chip with SAMD11C_serial firmware using Arduino IDE in order to get it functioning as UPDI serial device. Microchip ATSAMD11C14 support for Arduino Add additional board manager: \"File->Preferences\" \"Additional Boards Manager URLS:\" (https://raw.githubusercontent.com/qbolsee/ArduinoCore-fab-sam/master/json/package_Fab_SAM_index.json) Then open Boards Manager and install Fab SAM core for Arduino: \"Tools->Board->Boards Manager\" install \"Fab SAM core for Arduino\" After that Arduino should have support for ATSAMD11C14 and many other chips from that family. Compiling SAMD11C_serial firmware I downloaded SAMD11C_serial.ino and opened it to Arduino. Select correct environment for that ATSAMD11C14 chip. Instructions from SAMD11C_serial . \"Tools->Board->Fab SAM core for Arduino->Generic D11C14A\" \"Tools->USB config->CDC_only\" \"Tools->Serial config->TWO_UART_NO_WIRE_NO_SPI\" \"Tools->Bootloader Size->4KB_BOOTLOADER\" \"Tools->Port->/dev/ttyACM0 (Generic D11C14A)\" \"Sketch->Compile/Verify\" Transfer SAMD11C_serial firmware to chip \"Sketch->Upload\" Sketch uses 10156 bytes (82%) of program storage space. Maximum is 12288 bytes. Atmel SMART device 0x10030006 found Device : ATSAMD11C14A Chip ID : 10030006 Version : v2.0 Aug 31 2021 14:06:56 Address : 4096 Pages : 192 Page Size : 64 bytes Total Size : 12KB Planes : 1 Lock Regions : 16 Locked : none Security : false Boot Flash : true BOD : true BOR : true Erase flash done in 0.338 seconds Write 10508 bytes to flash (165 pages) [==============================] 100% (165/165 pages) done in 2.908 seconds Verify 10508 bytes of flash [==============================] 100% (165/165 pages) Verify successful done in 0.481 seconds CPU reset. Testing UPDI programmer For testing build UPDI programmer I need some device to flash. For that I used hello.t412.echo board from lab. I already had Arduino installed on my workstation as I earlier did some esp8266 projects, so I only needed to install ATtiny412 specific development files to Arduino. hello.t412.echo board is tiny PCB having ATtiny412 chip with two communication interfaces: UPDI for programming the chip serial for receive and transmit data Board had initially some slightly tweaked software, its output was in Finnish. I replaced and tested it with the \"standard\" one. Microchip ATtiny412 support for Arduino I added megaTinyCore using Arduino Boards Manager as descripted in installation instructions: Installing megaTinyCore Add additional board manager: \"File->Preferences\" \"Additional Boards Manager URLS:\" (http://drazzy.com/package_drazzy.com_index.json) Then open Boards Manager and install megaTinyCore: \"Tools->Board->Boards Manager\" install \"megaTinyCore\" After that Arduino should have support for ATtiny412 and many other chips from that family. Compiling hello.t412.echo.ino test program I downloaded hello.t412.echo.ino and opened it to Arduino. Select correct environment for that ATtiny412 chip. \"Tools->Board->megaTinyCore->ATtiny412/402/212/202\" \"Tools->Chip->ATtiny412\" \"Sketch->Compile/Verify\" Sketch uses 1918 bytes (46%) of program storage space. Maximum is 4096 bytes. Global variables use 91 bytes (35%) of dynamic memory, leaving 165 bytes for local variables. Maximum is 256 bytes. It compiled correctly. Transfer hello.t412.echo program to chip Connect UPDI, Vcc and GND wires between programmer and device carefully and correctly. Plug UPDI programmer to computer. On my case, Linux, it appears as /dev/ttyACM0 serial device. UPDI programmer pinout hello.t412.echo pinout \"Tools->Port\" (/dev/ttyACM0) \"Tools->Programmer->SerialUPDI - SLOW: 57600 baud, any platform, any voltage, any adapter.\" \"Sketch->Upload\" SerialUPDI UPDI programming for Arduino using a serial adapter Based on pymcuprog, with significant modifications By Quentin Bolsee and Spence Konde Version 1.2.3 - Jan 2022 Using serial port /dev/ttyACM0 at 57600 baud. Target: attiny412 Set fuses: ['2:0x02', '6:0x04', '8:0x00'] Action: write File: /tmp/arduino_build_547357/hello.t412.echo.ino.hex Pinging device... Ping response: 1E9223 Setting fuse 0x2=0x2 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x6=0x4 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x8=0x0 Writing literal values... Verifying literal values... Action took 0.02s Finished writing fuses. Chip/Bulk erase, Memory type eeprom is conditionally erased (depending upon EESAVE fuse setting) Memory type flash is always erased Memory type lockbits is always erased ... Erased. Action took 0.01s Writing from hex file... Writing flash... [==================================================] 30/30 Action took 0.65s Verifying... [==================================================] 4/4 Verify successful. Data in flash matches data in specified hex-file Action took 0.42s Chip firmware is uploaded successfully, which is is enough to confirm our UPDI programmer works correctly. Test hello.t412.echo board I think this is out of scope of this week, but here it is briefly. I used USB serial board to test hello.t412.echo board. Connect TX<->RX and RX<->TX lines between USB serial and hello.t412.echo board. Also connect 5V Vcc and GND from USB serial to hello.t412.echo board. Disable hw flow control from USB serial (not sure if it is needed, I didn't test). Plug USB cable to computer and open terminal with following settings and test to type some letters. $ python -m serial.tools.miniterm /dev/ttyUSB0 115200 --- Miniterm on /dev/ttyUSB0 115200,8,N,1 --- --- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H --- hello.t412.echo: you typed \"H\" hello.t412.echo: you typed \"He\" hello.t412.echo: you typed \"Hel\" hello.t412.echo: you typed \"Hell\" hello.t412.echo: you typed \"Hello\" hello.t412.echo: you typed \"Hello \" hello.t412.echo: you typed \"Hello F\" hello.t412.echo: you typed \"Hello Fa\" hello.t412.echo: you typed \"Hello Fab\" hello.t412.echo: you typed \"Hello Fab \" hello.t412.echo: you typed \"Hello Fab L\" hello.t412.echo: you typed \"Hello Fab La\" hello.t412.echo: you typed \"Hello Fab Lab\" hello.t412.echo: you typed \"Hello Fab Lab \" hello.t412.echo: you typed \"Hello Fab Lab O\" hello.t412.echo: you typed \"Hello Fab Lab Ou\" hello.t412.echo: you typed \"Hello Fab Lab Oul\" hello.t412.echo: you typed \"Hello Fab Lab Oulu\" --- exit --- $ Test setup used. UPDI, hello.t412.echo and USB serial. Files linetest.png.rml linetest.interior.png.rml Final thoughts This week I learned the basics of milling a PCB. I have designed and milled some PCBs many many years ago, but I no longer remember the process very well. Also, in the past back then I used a real PCB milling machine and not a universal milling machine like the Roland MonoFab SRM-20. Now I gained more experience from Roland and a little less from LPKF ProtoMat S62. Soldering this simple device was nothing new to me. Also, Arduino and device programming was something that I was already very familiar with.","title":"6. Electronics production"},{"location":"assignments/week06/#6-electronics-production","text":"","title":"6. Electronics production"},{"location":"assignments/week06/#assignment","text":"","title":"Assignment"},{"location":"assignments/week06/#individual-assignment","text":"make an in-circuit programmer by milling and stuffing the PCB https://gitlab.fabcloud.org/pub/programmers/programmer-swd-d11c https://gitlab.fabcloud.org/pub/programmers/programmer-updi-d11c test it, then optionally try other PCB processes","title":"Individual assignment"},{"location":"assignments/week06/#group-assignment","text":"characterize the design rules for your PCB production process https://mods.cba.mit.edu/ traces interior 1/64\" 0.010\" fiber laser","title":"Group assignment"},{"location":"assignments/week06/#pcb-production-with-roland-monofab-srm-20-milling-machine","text":"Roland MonoFab SRM-20 is rather small desktop CNC milling machine. It is a general purpose milling machine which means it is not the best one for the special purposes like PCB milling though. Anyhow, it could do rather nice PCB milling in cases where PCB area is not very large, PCB is single sided and used traces are relatively wide. It is also quite slow compared to milling machines that are made just for the PCB milling. On the lab I did that \"linetest\" using Roland MonoFab SRM-20. Toolpath traces were generated with \"Mods\" tool https://mods.cba.mit.edu/ .","title":"PCB production with Roland MonoFab SRM-20 milling machine"},{"location":"assignments/week06/#toolpath-generation-modscbamitedu","text":"http://academy.cba.mit.edu/classes/electronics_production/linetest.png http://academy.cba.mit.edu/classes/electronics_production/linetest.interior.png Fab Academy linetest.png used on this exercise Fab Academy linetest.interior.png used on this exercise Here is step-by-step screenshots how I generated toolpaths for \"linetest\". Empty workbench. https://mods.cba.mit.edu/ Select \"programs\" Select \"open server program\" Select \"machines->Roland->mill->SRM-20->PCB png\" Milling design tool main view Select \"select png file\" \"linetest.png\" file selected from computer Set tool diameter to 0.25 Change milling machine origin to 0/0/0 Select \"delete\" Delete \"WebSocket device\" module because we don't have network connection on our milling machine. We create \"save file\" module as a replacement. Select \"modules\" Select \"open server module\" Select \"file->save\" Add connection between modules. Red line is new connection. Select \"calculate\" Save Roland SRM-20 toolpath file for traces Select \"select png file\" \"linetest.interior.png\" file selected from computer select \"mill outline (1/32)\" Set tool diameter to 1 Select \"calculate\" Save Roland SRM-20 toolpath file for outline Generated toolpath for traces (linetest.png) Generated toolpath for outline (linetest.interior.png)","title":"Toolpath generation mods.cba.mit.edu"},{"location":"assignments/week06/#modules-generally-needed-to-touch-when-using-mods-for-pcb-milling","text":"","title":"Modules generally needed to touch when using Mods for PCB milling"},{"location":"assignments/week06/#read-png","text":"Basic input file operations, self explaining?","title":"\"read png\""},{"location":"assignments/week06/#set-pcb-defaults","text":"This module is just to select suitable default values for \"mill raster 2D\" module. Two choices, one for traces and one for outlines.","title":"\"set PCB defaults\""},{"location":"assignments/week06/#mill-raster-2d","text":"This is the most important module. Default settings are pretty good, change if needed. Our lab has for example smaller drill bit for traces than default and larger bit for outlines than default. Change accordingly. Our PCB was FR-1 which is something like 1.6mm substrate and 0.035mm copper or so. Default values fit very well for those PCB thickness, so there is no need to adjust even if those are slightly off. Our lab re-uses LPKF ProtoMat S62 PCB machine milling bits for SRM-20 PCB milling. Especially tracing drill is different as it is V-shaped 0.2mm-0.5mm drill bit. The bigger the cut depth is, the wider the trace will be. I used 0.25mm value for that bit with all the other settings default, which produces very nice cut. Offset number setting means how many rounds drill will run in parallel, the bigger the number the larger area is skinned off from the the copper. Different values can be tested and result seen from \"view toolpath\" module. You may compensate smaller drill by adding more offset, but V-shaped drill bits are not aimed for that so it is better to remove extra copper using more suitable drill bit.","title":"\"mill raster 2D\""},{"location":"assignments/week06/#roland-srm-20-milling-machine","text":"Module for head positioning. Module \"origin\" should be zeroed as we set origin from machine UI \"VPanel for SRM-20\" in order to avoid \"double\" origin. Those defaults are for a situation where SRM-20 is connected and controlled directly by this \"Mods\" module, but on our case the toolpath is transferred by file. \"jog height\" is the value how much drill is lifted above the Z-origin when transferred (not cut) to different position. Default 2mm is OK, I would say do not decrease. \"home\" is position where head is moved after the milling job is finished.","title":"\"Roland SRM-20 milling machine\""},{"location":"assignments/week06/#save-file","text":"Saves our toolpath to file.","title":"\"save file\""},{"location":"assignments/week06/#view-toolpath","text":"Open and see how your calculated toolpath looks.","title":"\"view toolpath\""},{"location":"assignments/week06/#milling-the-pcb","text":"Machine used was Roland MonoFab SRM-20. Firstly, PCB needs to be attached very well to milling machine bed. PCB has very thin layer of copper which is removed by milling. We are speaking of tolerances about 0.1mm - so attached PCB needs to be very flat! Often PCB is attached to bed using double sided adhesive tape, but we used single side tape for both bed and PCB and used super glue between tapes. Bed and PCB taped Bed and PCB glued VPanel for SRM-20 - Roland MonoFab SRM-20 application UI I transferred linetest toolpath files to VPanel for SRM-20 application which is ran on normal PC workstation. There is few things to do. I need those 2 drill bits, one for traces and one for outline. Insert traces bit first to SRM-20, be careful, don't drop bit. Then set X/Y-origin and finally set Z-origin. Be very careful when setting Z-origin to avoid crashing bit to PCB. Ran drill bit very near to PCB, then open drill bit lock screw in order to drop drill bit to PCB surface. Tighten lock screw. Set Z-origin to that point using VPanel. Move Z-axis upwards to avoid PCB contact after origin is set. Mill traces. Switch to outer line drill bit similar way than earlier when tracing bit was used. Z-origin needs to be set again similarly than earlier - but do not touch X/Y-origin, it should be remain same that outline milling reach correct location. Mill outline. Remove PCB. Milling \"linetest\" PCB I am milling linetest here. Three UPDI or SWD programmer PCBs are already milled as can be seen from those holes on the PCB. linetest PCB is milled linetest PCB Milled PCB looks pretty nice. I am not 100% sure how to interpret that, but it looks like scale is in Inches. So 0.010 * 25.4mm = 0.254mm is that smallest slot machine did. It fits to trace drill bit size, 0.25mm, I used in mods when toolpath was made.","title":"Milling the PCB"},{"location":"assignments/week06/#programmer-updi-d11c","text":"As a exercise I made Programmer UPDI D11C . We did PCB this time using LPKF ProtoMat S62 PCB milling machine. I had rather much earlier experience from electronics which helps a lot. LPKF ProtoMat S62 PCB milling machine Programmer UPDI D11C PCB Capasitor, 1uF MCU, Atmel SAM D11 4-pin header 6-pin header Voltage regulator, 3.3V Resistor 2 pieces, 4.99k ohm Atmel SAM D11 Soldering","title":"Programmer UPDI D11C"},{"location":"assignments/week06/#updi-d11c-bootloader","text":"Our instructor programmed bootloader to my UPDI board chip using SWD programmer. After bootloader installation chip enumerates to USB bus and my Linux workstation detected it as a USB serial device. Flashing bootloader to SAMD11C14","title":"UPDI D11C bootloader"},{"location":"assignments/week06/#updi-d11c-firmware","text":"Finally I programmed chip with SAMD11C_serial firmware using Arduino IDE in order to get it functioning as UPDI serial device.","title":"UPDI D11C firmware"},{"location":"assignments/week06/#microchip-atsamd11c14-support-for-arduino","text":"Add additional board manager: \"File->Preferences\" \"Additional Boards Manager URLS:\" (https://raw.githubusercontent.com/qbolsee/ArduinoCore-fab-sam/master/json/package_Fab_SAM_index.json) Then open Boards Manager and install Fab SAM core for Arduino: \"Tools->Board->Boards Manager\" install \"Fab SAM core for Arduino\" After that Arduino should have support for ATSAMD11C14 and many other chips from that family.","title":"Microchip ATSAMD11C14 support for Arduino"},{"location":"assignments/week06/#compiling-samd11c_serial-firmware","text":"I downloaded SAMD11C_serial.ino and opened it to Arduino. Select correct environment for that ATSAMD11C14 chip. Instructions from SAMD11C_serial . \"Tools->Board->Fab SAM core for Arduino->Generic D11C14A\" \"Tools->USB config->CDC_only\" \"Tools->Serial config->TWO_UART_NO_WIRE_NO_SPI\" \"Tools->Bootloader Size->4KB_BOOTLOADER\" \"Tools->Port->/dev/ttyACM0 (Generic D11C14A)\" \"Sketch->Compile/Verify\"","title":"Compiling SAMD11C_serial firmware"},{"location":"assignments/week06/#transfer-samd11c_serial-firmware-to-chip","text":"\"Sketch->Upload\" Sketch uses 10156 bytes (82%) of program storage space. Maximum is 12288 bytes. Atmel SMART device 0x10030006 found Device : ATSAMD11C14A Chip ID : 10030006 Version : v2.0 Aug 31 2021 14:06:56 Address : 4096 Pages : 192 Page Size : 64 bytes Total Size : 12KB Planes : 1 Lock Regions : 16 Locked : none Security : false Boot Flash : true BOD : true BOR : true Erase flash done in 0.338 seconds Write 10508 bytes to flash (165 pages) [==============================] 100% (165/165 pages) done in 2.908 seconds Verify 10508 bytes of flash [==============================] 100% (165/165 pages) Verify successful done in 0.481 seconds CPU reset.","title":"Transfer SAMD11C_serial firmware to chip"},{"location":"assignments/week06/#testing-updi-programmer","text":"For testing build UPDI programmer I need some device to flash. For that I used hello.t412.echo board from lab. I already had Arduino installed on my workstation as I earlier did some esp8266 projects, so I only needed to install ATtiny412 specific development files to Arduino. hello.t412.echo board is tiny PCB having ATtiny412 chip with two communication interfaces: UPDI for programming the chip serial for receive and transmit data Board had initially some slightly tweaked software, its output was in Finnish. I replaced and tested it with the \"standard\" one.","title":"Testing UPDI programmer"},{"location":"assignments/week06/#microchip-attiny412-support-for-arduino","text":"I added megaTinyCore using Arduino Boards Manager as descripted in installation instructions: Installing megaTinyCore Add additional board manager: \"File->Preferences\" \"Additional Boards Manager URLS:\" (http://drazzy.com/package_drazzy.com_index.json) Then open Boards Manager and install megaTinyCore: \"Tools->Board->Boards Manager\" install \"megaTinyCore\" After that Arduino should have support for ATtiny412 and many other chips from that family.","title":"Microchip ATtiny412 support for Arduino"},{"location":"assignments/week06/#compiling-hellot412echoino-test-program","text":"I downloaded hello.t412.echo.ino and opened it to Arduino. Select correct environment for that ATtiny412 chip. \"Tools->Board->megaTinyCore->ATtiny412/402/212/202\" \"Tools->Chip->ATtiny412\" \"Sketch->Compile/Verify\" Sketch uses 1918 bytes (46%) of program storage space. Maximum is 4096 bytes. Global variables use 91 bytes (35%) of dynamic memory, leaving 165 bytes for local variables. Maximum is 256 bytes. It compiled correctly.","title":"Compiling hello.t412.echo.ino test program"},{"location":"assignments/week06/#transfer-hellot412echo-program-to-chip","text":"Connect UPDI, Vcc and GND wires between programmer and device carefully and correctly. Plug UPDI programmer to computer. On my case, Linux, it appears as /dev/ttyACM0 serial device. UPDI programmer pinout hello.t412.echo pinout \"Tools->Port\" (/dev/ttyACM0) \"Tools->Programmer->SerialUPDI - SLOW: 57600 baud, any platform, any voltage, any adapter.\" \"Sketch->Upload\" SerialUPDI UPDI programming for Arduino using a serial adapter Based on pymcuprog, with significant modifications By Quentin Bolsee and Spence Konde Version 1.2.3 - Jan 2022 Using serial port /dev/ttyACM0 at 57600 baud. Target: attiny412 Set fuses: ['2:0x02', '6:0x04', '8:0x00'] Action: write File: /tmp/arduino_build_547357/hello.t412.echo.ino.hex Pinging device... Ping response: 1E9223 Setting fuse 0x2=0x2 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x6=0x4 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x8=0x0 Writing literal values... Verifying literal values... Action took 0.02s Finished writing fuses. Chip/Bulk erase, Memory type eeprom is conditionally erased (depending upon EESAVE fuse setting) Memory type flash is always erased Memory type lockbits is always erased ... Erased. Action took 0.01s Writing from hex file... Writing flash... [==================================================] 30/30 Action took 0.65s Verifying... [==================================================] 4/4 Verify successful. Data in flash matches data in specified hex-file Action took 0.42s Chip firmware is uploaded successfully, which is is enough to confirm our UPDI programmer works correctly.","title":"Transfer hello.t412.echo program to chip"},{"location":"assignments/week06/#test-hellot412echo-board","text":"I think this is out of scope of this week, but here it is briefly. I used USB serial board to test hello.t412.echo board. Connect TX<->RX and RX<->TX lines between USB serial and hello.t412.echo board. Also connect 5V Vcc and GND from USB serial to hello.t412.echo board. Disable hw flow control from USB serial (not sure if it is needed, I didn't test). Plug USB cable to computer and open terminal with following settings and test to type some letters. $ python -m serial.tools.miniterm /dev/ttyUSB0 115200 --- Miniterm on /dev/ttyUSB0 115200,8,N,1 --- --- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H --- hello.t412.echo: you typed \"H\" hello.t412.echo: you typed \"He\" hello.t412.echo: you typed \"Hel\" hello.t412.echo: you typed \"Hell\" hello.t412.echo: you typed \"Hello\" hello.t412.echo: you typed \"Hello \" hello.t412.echo: you typed \"Hello F\" hello.t412.echo: you typed \"Hello Fa\" hello.t412.echo: you typed \"Hello Fab\" hello.t412.echo: you typed \"Hello Fab \" hello.t412.echo: you typed \"Hello Fab L\" hello.t412.echo: you typed \"Hello Fab La\" hello.t412.echo: you typed \"Hello Fab Lab\" hello.t412.echo: you typed \"Hello Fab Lab \" hello.t412.echo: you typed \"Hello Fab Lab O\" hello.t412.echo: you typed \"Hello Fab Lab Ou\" hello.t412.echo: you typed \"Hello Fab Lab Oul\" hello.t412.echo: you typed \"Hello Fab Lab Oulu\" --- exit --- $ Test setup used. UPDI, hello.t412.echo and USB serial.","title":"Test hello.t412.echo board"},{"location":"assignments/week06/#files","text":"linetest.png.rml linetest.interior.png.rml","title":"Files"},{"location":"assignments/week06/#final-thoughts","text":"This week I learned the basics of milling a PCB. I have designed and milled some PCBs many many years ago, but I no longer remember the process very well. Also, in the past back then I used a real PCB milling machine and not a universal milling machine like the Roland MonoFab SRM-20. Now I gained more experience from Roland and a little less from LPKF ProtoMat S62. Soldering this simple device was nothing new to me. Also, Arduino and device programming was something that I was already very familiar with.","title":"Final thoughts"},{"location":"assignments/week07/","text":"7. Electronics design Assignment Individual assignment redraw an echo hello-world board, add (at least) a button and LED (with current-limiting resistor) check the design rules, make it, and test it extra credit: simulate its operation Group assignment use the test equipment in your lab to observe the operation of a micro-controller circuit board KiCad 6 We used KiCad to design the electronics. It\u2019s a widely used open source program and pretty good so there was no need to even evaluate at other options. I have previous experience in electronics design from years ago, but the program used was different and it has been so long since that anyway. KiCad installation A version 6 of the KiCad design suite is released recently, on 25th of December 2021. That version upgrade from 5 to 6 is a major change since earlier version was over 3 years old from year 2018. Our Fab Lab had the latest version installed and I wanted to install it on my workstation as well. I have a slightly old Fedora release 34 at my home workstation with only the older KiCad version 5 supported as native. Luckily, the newer version was easily available from the Fedora Copr repository so I installed it. KiCad Install on Fedora . sudo dnf install dnf-plugins-core sudo dnf copr enable @ kicad / kicad sudo dnf install kicad KiCad Fab Lab settings Fab electronics component library for KiCad contains all the official components that should be found in every Fab Lab. The components available in the library are easy to use in KiCad and you don't have to look for components elsewhere or design them yourself. There are a huge number of common components in the program anyway and you can use them as well, but then you have to take a closer look at the package of the component that it matches for component in Fab Lab, for example. I followed the installation instructions for the Fab component library on my home computer and used the following settings: $ cd ~/fablab/ $ git clone https://gitlab.fabcloud.org/pub/libraries/electronics/kicad.git KiCad Configure Paths KiCad Footprint Libraries KiCad Symbol Libraries ATtiny 412 board I did the standard echo hello device with button and led. First we looked Fab Academy board and made almost similar to it, having same micro-controller and UART connected to \"FTDI\" header, but added led and button too. Used micro-controller ATtiny 412 has very limited amount of I/O pins - only 6 - and even one of those is kinda reserved for the UPDI programmer. I connected LED between PA7 and VCC in series with 1k resistor to limit current. Button is connected between PA6 and ground having also 10k pull-up resistor to Vcc. Pull-up resistor is not mandatory, as I can understand the chip already has integrated pull-ups, that could be enabled by the software but anyhow now pull-up resistor is here still for sure. BOM exported from KiCad. References Value Footprint Quantity C1 C C_1206 1 R1 1k R_1206 1 R2 10k R_1206 1 D1 LED LED_1206 1 U1 Microcontroller_ATtiny412_SSFR SOIC-8_3.9x4.9mm_P1.27mm 1 SW1 BUTTON_B3SN Button_Omron_B3SN_6x6mm 1 J1 Conn_PinHeader_FTDI_1x06_P2.54mm_Horizontal_SMD PinHeader_FTDI_01x06_P2.54mm_Horizontal_SMD 1 J2 Conn_PinHeader_1x03_P2.54mm_Horizontal_SMD PinHeader_1x03_P2.54mm_Horizontal_SMD 1 I forgot to add C1 value to design. 1uF was used. Components KiCad Schematic Editor KiCad PCB Editor KiCad PCB Editor - Board Setup used KiCad Export SVG for Roland MonoFab SRM-20 KiCad Plot Gerber for LPKF ProtoMat S62 Mods fails to generate toolpath I exported PCB as a vector two images from KiCad, one image for traces and other image as board outline. After that I used mods tool to make toolpaths for Roland monoFab SRM-20 milling machine. At this point I had a lot of problems - I could not understand why my PCB borders were all the time wrong. I tried all relevant KiCad export settings very many times, tweaked with KiCad PCB borders (Edge Cuts layer) and some other layers but still it was always wrong and mods generated totally bad looking toolpaths which I sure didn't even want to test mill. Eventually I decided to open PCB borders file directly with my browser, Firefox, and saw the borders image were still rendered as badly as mods running on Firefox browser. At that point I started to suspect it might be an issue coused by the used browser and its svg-libraries. Then I decided to install Chromium browser (it is open source version of Google Chrome) as it was available on Fedora package management. That browser shows svg-file correctly, but then I ran other problem with mods when used Chromium browser - it fails to generate toolpath itself! Two steps forward and one step back :( After mods was find out to be broken with both Firefox and Chromium I started looking yet another browser. That browser was Google Chrome. I installed it from package available from vendor site. And finally it was a browser which works with mods on this single case at least. Too many compatibility issues - I have to say I am feeling mods is not best tool to mill PCB boards. Here is pictures how simple PCB border in SVG format from KiCad is rendered on different applications. Firefox fails it badly. PCB borders .SVG on Firefox PCB borders .SVG on Chromium PCB borders .SVG on Google Chrome PCB borders .SVG on Inkscape Different PCB mills From KiCad PCB Editor I made both SVG-images and Gerber files of my PCB design. I made 2 PCBs using different milling machines, Roland MonoFab SRM-20 and LPKF ProtoMat S62. For Roland it was tricky to do PCB with that small traces as I used 0.4mm for Track Width and 0.25mm for Clearance. After two failed attempts I started adjusting trace milling depth from 0.05mm to 0.10mm by manual adjusting cut depth step by step deeper until it was fine. 0.2-0.5mm V-shaped drill bit was used. PCB v1 on Roland. It is bad. PCB v2 on Roland. It is OK. PCB v2 on LPKF. It is OK. Soldering Testing the board Test setup I used Arduino IDE and Fab Academy hello.t412.echo.ino code to test it. To test LED and button I make minor modifications to this Fab Academy hello echo program. $ diff hello.t412.echo/hello.t412.echo.ino echo.hello.led.button.t412/echo.hello.led.button.t412.ino 24a25,27 > > pinMode(PIN_PA6, INPUT); // button > pinMode(PIN_PA7, OUTPUT); // led 36a40,43 > > // toggle led when button is pressed > if (!digitalRead(PIN_PA6)) > digitalWrite(PIN_PA7, !digitalRead(PIN_PA7)); $ The button and LED works as expected. The microcontroller reads the state of the button in the loop at a very high frequency, so during a single physical press, it's status is read many, many times. Therefore, it is random which value happens to stay there, when the button is released. Compiling: Sketch uses 2020 bytes (49%) of program storage space. Maximum is 4096 bytes. Global variables use 91 bytes (35%) of dynamic memory, leaving 165 bytes for local variables. Maximum is 256 bytes. Programming: SerialUPDI UPDI programming for Arduino using a serial adapter Based on pymcuprog, with significant modifications By Quentin Bolsee and Spence Konde Version 1.2.3 - Jan 2022 Using serial port /dev/ttyACM0 at 57600 baud. Target: attiny412 Set fuses: ['2:0x02', '6:0x04', '8:0x00'] Action: write File: /tmp/arduino_build_609485/echo.hello.led.button.t412.ino.hex Pinging device... Ping response: 1E9223 Setting fuse 0x2=0x2 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x6=0x4 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x8=0x0 Writing literal values... Verifying literal values... Action took 0.02s Finished writing fuses. Chip/Bulk erase, Memory type eeprom is conditionally erased (depending upon EESAVE fuse setting) Memory type flash is always erased Memory type lockbits is always erased ... Erased. Action took 0.01s Writing from hex file... Writing flash... [==================================================] 30/30 Action took 0.65s Verifying... [==================================================] 4/4 Verify successful. Data in flash matches data in specified hex-file Action took 0.42s Testing serial port: $ python -m serial.tools.miniterm /dev/ttyUSB0 115200 --- Miniterm on /dev/ttyUSB0 115200,8,N,1 --- --- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H --- hello.t412.echo: you typed \"F\" hello.t412.echo: you typed \"Fa\" hello.t412.echo: you typed \"Fab\" hello.t412.echo: you typed \"Fab \" hello.t412.echo: you typed \"Fab L\" hello.t412.echo: you typed \"Fab La\" hello.t412.echo: you typed \"Fab Lab\" hello.t412.echo: you typed \"Fab Lab \" hello.t412.echo: you typed \"Fab Lab O\" hello.t412.echo: you typed \"Fab Lab Ou\" hello.t412.echo: you typed \"Fab Lab Oul\" hello.t412.echo: you typed \"Fab Lab Oulu\" --- exit --- $ Observe UART data Sniffing the UART signals with a logic analyzer I measured the signals from the device UART with LabNation SmartScope. The device has both an oscilloscope and a logic analyzer. A UART is a slow digital bus with two data lines TX and RX, one for receiving data and the other for transmitting. There is no clock signal at all. Both the oscilloscope and the logic analyzer can measure the signal traveling on the bus, but from slightly different angles. An oscilloscope is more suitable for examining the waveform of a signal, while a logic analyzer is better suited for capturing and examining the data itself that travels on a bus. I connected the device's TX and RX lines using test clips to a logic analyzer and captured data from both buses. I turned the UART decoder on the analyzer and selected ASCII as the data format to be decoded because the device is sending text. This allowed me to easily check what text was transfered between the device and the computer. On that case it can be seen the board responds with a text: hello.t412.echo: you typed \"Hello Fab Lab Oulu\" . ATtiny 412 UART data UART pulse timings UART decoder settings Files EchoHelloLedButton.zip EchoHelloLedButton-F_Cu.svg EchoHelloLedButton-Edge_Cuts.svg traces.rml outline.rml echo.hello.led.button.t412.patch Final thoughts This week I learned the basics of KiCad and gained a lot more experience in PCB milling. I already knew the theory of electronics design at this level, though.","title":"7. Electronics design"},{"location":"assignments/week07/#7-electronics-design","text":"","title":"7. Electronics design"},{"location":"assignments/week07/#assignment","text":"","title":"Assignment"},{"location":"assignments/week07/#individual-assignment","text":"redraw an echo hello-world board, add (at least) a button and LED (with current-limiting resistor) check the design rules, make it, and test it extra credit: simulate its operation","title":"Individual assignment"},{"location":"assignments/week07/#group-assignment","text":"use the test equipment in your lab to observe the operation of a micro-controller circuit board","title":"Group assignment"},{"location":"assignments/week07/#kicad-6","text":"We used KiCad to design the electronics. It\u2019s a widely used open source program and pretty good so there was no need to even evaluate at other options. I have previous experience in electronics design from years ago, but the program used was different and it has been so long since that anyway.","title":"KiCad 6"},{"location":"assignments/week07/#kicad-installation","text":"A version 6 of the KiCad design suite is released recently, on 25th of December 2021. That version upgrade from 5 to 6 is a major change since earlier version was over 3 years old from year 2018. Our Fab Lab had the latest version installed and I wanted to install it on my workstation as well. I have a slightly old Fedora release 34 at my home workstation with only the older KiCad version 5 supported as native. Luckily, the newer version was easily available from the Fedora Copr repository so I installed it. KiCad Install on Fedora . sudo dnf install dnf-plugins-core sudo dnf copr enable @ kicad / kicad sudo dnf install kicad","title":"KiCad installation"},{"location":"assignments/week07/#kicad-fab-lab-settings","text":"Fab electronics component library for KiCad contains all the official components that should be found in every Fab Lab. The components available in the library are easy to use in KiCad and you don't have to look for components elsewhere or design them yourself. There are a huge number of common components in the program anyway and you can use them as well, but then you have to take a closer look at the package of the component that it matches for component in Fab Lab, for example. I followed the installation instructions for the Fab component library on my home computer and used the following settings: $ cd ~/fablab/ $ git clone https://gitlab.fabcloud.org/pub/libraries/electronics/kicad.git KiCad Configure Paths KiCad Footprint Libraries KiCad Symbol Libraries","title":"KiCad Fab Lab settings"},{"location":"assignments/week07/#attiny-412-board","text":"I did the standard echo hello device with button and led. First we looked Fab Academy board and made almost similar to it, having same micro-controller and UART connected to \"FTDI\" header, but added led and button too. Used micro-controller ATtiny 412 has very limited amount of I/O pins - only 6 - and even one of those is kinda reserved for the UPDI programmer. I connected LED between PA7 and VCC in series with 1k resistor to limit current. Button is connected between PA6 and ground having also 10k pull-up resistor to Vcc. Pull-up resistor is not mandatory, as I can understand the chip already has integrated pull-ups, that could be enabled by the software but anyhow now pull-up resistor is here still for sure. BOM exported from KiCad. References Value Footprint Quantity C1 C C_1206 1 R1 1k R_1206 1 R2 10k R_1206 1 D1 LED LED_1206 1 U1 Microcontroller_ATtiny412_SSFR SOIC-8_3.9x4.9mm_P1.27mm 1 SW1 BUTTON_B3SN Button_Omron_B3SN_6x6mm 1 J1 Conn_PinHeader_FTDI_1x06_P2.54mm_Horizontal_SMD PinHeader_FTDI_01x06_P2.54mm_Horizontal_SMD 1 J2 Conn_PinHeader_1x03_P2.54mm_Horizontal_SMD PinHeader_1x03_P2.54mm_Horizontal_SMD 1 I forgot to add C1 value to design. 1uF was used. Components KiCad Schematic Editor KiCad PCB Editor KiCad PCB Editor - Board Setup used KiCad Export SVG for Roland MonoFab SRM-20 KiCad Plot Gerber for LPKF ProtoMat S62","title":"ATtiny 412 board"},{"location":"assignments/week07/#mods-fails-to-generate-toolpath","text":"I exported PCB as a vector two images from KiCad, one image for traces and other image as board outline. After that I used mods tool to make toolpaths for Roland monoFab SRM-20 milling machine. At this point I had a lot of problems - I could not understand why my PCB borders were all the time wrong. I tried all relevant KiCad export settings very many times, tweaked with KiCad PCB borders (Edge Cuts layer) and some other layers but still it was always wrong and mods generated totally bad looking toolpaths which I sure didn't even want to test mill. Eventually I decided to open PCB borders file directly with my browser, Firefox, and saw the borders image were still rendered as badly as mods running on Firefox browser. At that point I started to suspect it might be an issue coused by the used browser and its svg-libraries. Then I decided to install Chromium browser (it is open source version of Google Chrome) as it was available on Fedora package management. That browser shows svg-file correctly, but then I ran other problem with mods when used Chromium browser - it fails to generate toolpath itself! Two steps forward and one step back :( After mods was find out to be broken with both Firefox and Chromium I started looking yet another browser. That browser was Google Chrome. I installed it from package available from vendor site. And finally it was a browser which works with mods on this single case at least. Too many compatibility issues - I have to say I am feeling mods is not best tool to mill PCB boards. Here is pictures how simple PCB border in SVG format from KiCad is rendered on different applications. Firefox fails it badly. PCB borders .SVG on Firefox PCB borders .SVG on Chromium PCB borders .SVG on Google Chrome PCB borders .SVG on Inkscape","title":"Mods fails to generate toolpath"},{"location":"assignments/week07/#different-pcb-mills","text":"From KiCad PCB Editor I made both SVG-images and Gerber files of my PCB design. I made 2 PCBs using different milling machines, Roland MonoFab SRM-20 and LPKF ProtoMat S62. For Roland it was tricky to do PCB with that small traces as I used 0.4mm for Track Width and 0.25mm for Clearance. After two failed attempts I started adjusting trace milling depth from 0.05mm to 0.10mm by manual adjusting cut depth step by step deeper until it was fine. 0.2-0.5mm V-shaped drill bit was used. PCB v1 on Roland. It is bad. PCB v2 on Roland. It is OK. PCB v2 on LPKF. It is OK. Soldering","title":"Different PCB mills"},{"location":"assignments/week07/#testing-the-board","text":"Test setup I used Arduino IDE and Fab Academy hello.t412.echo.ino code to test it. To test LED and button I make minor modifications to this Fab Academy hello echo program. $ diff hello.t412.echo/hello.t412.echo.ino echo.hello.led.button.t412/echo.hello.led.button.t412.ino 24a25,27 > > pinMode(PIN_PA6, INPUT); // button > pinMode(PIN_PA7, OUTPUT); // led 36a40,43 > > // toggle led when button is pressed > if (!digitalRead(PIN_PA6)) > digitalWrite(PIN_PA7, !digitalRead(PIN_PA7)); $ The button and LED works as expected. The microcontroller reads the state of the button in the loop at a very high frequency, so during a single physical press, it's status is read many, many times. Therefore, it is random which value happens to stay there, when the button is released. Compiling: Sketch uses 2020 bytes (49%) of program storage space. Maximum is 4096 bytes. Global variables use 91 bytes (35%) of dynamic memory, leaving 165 bytes for local variables. Maximum is 256 bytes. Programming: SerialUPDI UPDI programming for Arduino using a serial adapter Based on pymcuprog, with significant modifications By Quentin Bolsee and Spence Konde Version 1.2.3 - Jan 2022 Using serial port /dev/ttyACM0 at 57600 baud. Target: attiny412 Set fuses: ['2:0x02', '6:0x04', '8:0x00'] Action: write File: /tmp/arduino_build_609485/echo.hello.led.button.t412.ino.hex Pinging device... Ping response: 1E9223 Setting fuse 0x2=0x2 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x6=0x4 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x8=0x0 Writing literal values... Verifying literal values... Action took 0.02s Finished writing fuses. Chip/Bulk erase, Memory type eeprom is conditionally erased (depending upon EESAVE fuse setting) Memory type flash is always erased Memory type lockbits is always erased ... Erased. Action took 0.01s Writing from hex file... Writing flash... [==================================================] 30/30 Action took 0.65s Verifying... [==================================================] 4/4 Verify successful. Data in flash matches data in specified hex-file Action took 0.42s Testing serial port: $ python -m serial.tools.miniterm /dev/ttyUSB0 115200 --- Miniterm on /dev/ttyUSB0 115200,8,N,1 --- --- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H --- hello.t412.echo: you typed \"F\" hello.t412.echo: you typed \"Fa\" hello.t412.echo: you typed \"Fab\" hello.t412.echo: you typed \"Fab \" hello.t412.echo: you typed \"Fab L\" hello.t412.echo: you typed \"Fab La\" hello.t412.echo: you typed \"Fab Lab\" hello.t412.echo: you typed \"Fab Lab \" hello.t412.echo: you typed \"Fab Lab O\" hello.t412.echo: you typed \"Fab Lab Ou\" hello.t412.echo: you typed \"Fab Lab Oul\" hello.t412.echo: you typed \"Fab Lab Oulu\" --- exit --- $","title":"Testing the board"},{"location":"assignments/week07/#observe-uart-data","text":"Sniffing the UART signals with a logic analyzer I measured the signals from the device UART with LabNation SmartScope. The device has both an oscilloscope and a logic analyzer. A UART is a slow digital bus with two data lines TX and RX, one for receiving data and the other for transmitting. There is no clock signal at all. Both the oscilloscope and the logic analyzer can measure the signal traveling on the bus, but from slightly different angles. An oscilloscope is more suitable for examining the waveform of a signal, while a logic analyzer is better suited for capturing and examining the data itself that travels on a bus. I connected the device's TX and RX lines using test clips to a logic analyzer and captured data from both buses. I turned the UART decoder on the analyzer and selected ASCII as the data format to be decoded because the device is sending text. This allowed me to easily check what text was transfered between the device and the computer. On that case it can be seen the board responds with a text: hello.t412.echo: you typed \"Hello Fab Lab Oulu\" . ATtiny 412 UART data UART pulse timings UART decoder settings","title":"Observe UART data"},{"location":"assignments/week07/#files","text":"EchoHelloLedButton.zip EchoHelloLedButton-F_Cu.svg EchoHelloLedButton-Edge_Cuts.svg traces.rml outline.rml echo.hello.led.button.t412.patch","title":"Files"},{"location":"assignments/week07/#final-thoughts","text":"This week I learned the basics of KiCad and gained a lot more experience in PCB milling. I already knew the theory of electronics design at this level, though.","title":"Final thoughts"},{"location":"assignments/week08/","text":"8. Input devices Assignment Individual assignment Measure something: add a sensor to a microcontroller board that you have designed and read it Group assignment Probe an input device's analog levels and digital signals New week, new board - ESP32 I decided to make a new circuit board with lots of I/O pins for this week. The intention is that I will cope with a new board throughout this course serie. I have been thinking of using the ESP32 circuit for the final project so I chose it as the microcontroller for the new board. Thus, I am already gaining experience with that microcontroller at the same. I designed the schematic and the PCB like in previous exercises with KiCad. I wanted to make the board as compact as possible, using surface mount technology and a single sided PCB. This posed some challenges, among other things, to the widths and clearances of the tracks used, which had to be made quite narrow. Another factor influencing the size of the tracks is the circuit board milling technology used, which also sets its own requirements. Because our lab has a decent circuit board milling machine, LPKF ProtoMat S62, I decided to use it to achieve a better end result and my requirements, and I didn\u2019t even try to use generic milling machine according to Fab Academy processes. Our milling machine generally uses a 0.2-0.5mm V-bit, based on which I selected 0.2mm clearance and 0.25mm track witdh. For the operating current tracks, I used a slightly bigger witdh. KiCad Schematic KiCad Net Classes KiCad PCB The ESP32 data sheet set some requirements such as operating voltage and minimum current \u200b\u200bas well as programming interface connections. The ESP32 requirement for operating current is 3.3V and at least 500mA. There were only 100mA and 1A regulators on the Fab Lab shelf so I used a 1A regulator. Other components required for power supply were found in the regulator data sheet. The reset and programming button connections with their peripherals are found from the ESP32 data sheet. Circuit board assembly Assembling the circuit board succeeded without major problems. ESP32 WROOM-32E, the module I used, was a little difficult to solder because the legs in it were like a 90-degree angle to the surface of the circuit board. Luckily, I had a QuadHands Jumbo Workbench in my home lab with which I got the circuit board at a suitable angle so that the soldering could be done with ease. Milled PCB Component assembly Schematic had 4.7uF capacitors in the regulator input and output as instructed by the regulator data sheet, but since there were no parts of that size on the shelf, I replaced them with 10uF when I assembled the circuit board. Circuit board testing After assembly, I did basic tests with a multimeter for possible short circuits. My USB serial port uses 5V voltages, so I started thinking if it would be safe to use due to too high a voltages. There was no concern with the operating voltage (Vcc) because the circuit board has a 3.3V regulator but the voltages on the TX/RX lines caused concern. There is no mention in the ESP32 data sheet whether those pins are 5V tolerant or not, so I had to find out if it is safe to plug TX/RX with that high voltage. Searching the internet I found information that all ESP32 digital I/O pins are 5V tolerant, although this is not explicitly mentioned in the data sheet. I connected USB serial port adapter to PCB normally, TX, RX, Vcc, GND. I checked the functionality of my board by trying to read the chip id with esptool. After a few attempts, it worked so I knew the circuit would work. Here I had to press the BOOT and EN buttons I had installed on the circuit board a few times. At the same time, it was found that the circuit enters programming mode when you hold down the BOOT button and resets the ESP32 with the EN button or by turning on the power. $ esptool --chip esp32 chip_id esptool.py v2.8 Found 1 serial ports Serial port /dev/ttyUSB0 Connecting..... Chip is ESP32D0WDQ6 (revision 1) Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None Crystal is 40MHz MAC: 24:6f:28:86:31:4c Uploading stub... Running stub... Stub running... Warning: ESP32 has no Chip ID. Reading MAC instead. MAC: 24:6f:28:86:31:4c Hard resetting via RTS pin... $ Temperature sensors Since my final project is a weather station I decided to use temperature sensors as input devices. I installed two different temperature sensors, a DHT11 and a 10k NTC thermistor. The DHT11 was a ready-made module with one data line in addition to the operating power interface. NTC thermistor is connected using simple voltage divider circuit to the ESP32 ADC converter. NTC thermistor voltage divider I installed a DHT11 sensor on the IO26 pin and an NTC thermistor circuit on the IO4 pin which has the ADC converter. I decided to test the temperature sensors with a small snippet of code. For code development, I used Arduino where I installed ESP32 support with the Board Manager at: https://dl.espressif.com/dl/package_esp32_index.json . From Arduino IDE I selected board: Tools -> Board -> ESP32 Arduino -> ESP32 Dev Module For the DHT11 sensor, many libraries were found in the Arduino Library Manager, from which I installed the \"DHT sensor library for ESPx\" . I quickly tested the operation of the sensor with an example program coming with the library and it worked right away. However, I still had that another sensor circuit based on NTC thermistor so I started to study the operation of the ADC converter. I read the values \u200b\u200bof the ADC converter from the microcontroller with the analogRead() function and examined them. The values \u200b\u200breturned by the function changed when I heated the thermistor with my finger, so it worked more or less, although the read values \u200b\u200bseemed to be a little lower than expected. I assumed that the ADC converter returns values \u200b\u200b0-4095 (12-bit resolution) linearly depending on the voltage 0-3.3V connected to the pin. After researching for a while, I realized that there are quite a few configurable things in the ESP32 ADC converter, of which the analogSetAttenuation() function seemed to be quite significant. I connected the adjustable voltage source to the ADC converter and tested using different voltages what kind of values ADC returns. I measured the following maximum possible voltages for each attenuation configuration. analogSetAttenuation() max voltage measured ADC_0db 1.0V ADC_2_5db 1.3V ADC_6db 1.9V ADC_11db 3.1V ADC testing Judging from the values, it seems that the ADC of the circuit reads a maximum voltage of 1V, but attenuators are connected in front of the ADC converter, which can increase the value range of the input. Still, those readings and attenuations didn\u2019t really open up for me, but at this point I couldn\u2019t get to know the matter further. Since when heating the NTC with the ADC_6db setting, it still saturates the ADC converter, I used the ADC_11db setting and scaled the values \u200b\u200bto the measured 3.1V voltage so that I got about the correct values. That was enough at this point. I was able to read the values \u200b\u200bfrom the device via the serial port as text and graphs with the Arduino serial plotter function. Arduino temperature sensor graphs The graph shows how the values \u200b\u200bgiven by the sensors change as they are heated. I used a hot air gun so the highest readings should probably be somewhere near 80 degrees Celsius. #include \"DHTesp.h\" DHTesp dht11; void setup() { Serial.begin(115200); Serial.println(\"Temperature test, input week\"); // analogSetAttenuation(ADC_0db); // 1.0V max measured // analogSetAttenuation(ADC_2_5db); // 1.3V max measured // analogSetAttenuation(ADC_6db); // 1.9V max measured analogSetAttenuation(ADC_11db); // 3.1V max measured // Initialize DHT11 temperature sensor, IO26 dht11.setup(26, DHTesp::DHT11); } void loop() { // ESP32 default ADC resolution is 12 bits, values 0 - 4095. // If we assume curve is linear and all the other are correct then ADC value 0 is 0V // and value 4095 is 3.3V => analogRead() / 4095 * 3.3 = voltage on pin. Only in theory. // It is not that simple, see analogSetAttenuation()... // Read 10k NTC thermistor on IO4. It is connected as voltage divider, so at 25C it should be 0.5 * 3.3V = 1.65V unsigned int AdcValue = analogRead(4); // Get DHT11 data TempAndHumidity sensorData; sensorData = dht11.getTempAndHumidity(); // Output is scaled somehow weird in order to plot it using Arduino Serial Plotter Serial.println(\"DHT11_Temperature:\" + String(sensorData.temperature, 2) + \" DHT11_Humidity:\" + String(sensorData.humidity, 1) + \" NTC_analogRead/100:\" + String(AdcValue/100.0) + \" NTC_Voltagex10:\" + String(3.1/4095 * AdcValue * 10)); sleep(2); } Oscilloscope exercise I used an oscilloscope to measure the digital signal from the DHT11 sensor data line and the analog signal from the NTC thermistor circuit. I used LabNation SmartScope for measurements, which is a small oscilloscope with a USB connection. Measurement setup NTC thermistor circuit NTC thermistor circuit DUT The voltage change from the NTC thermistor is not very interesting to measure with an oscilloscope, but it also got some curves - at least you can see how quickly it reacts to the temperature change. In this measurement I also used hot air gun. At 1m40, the graph shows how the voltage has risen to about 3.3V. From this it can be concluded that it is likely that the ADC is saturated and thus no actual temperature has been transmitted to the program, i.e. the voltage distribution used would not work for very high temperatures - maybe the same will happen for cold temperatures? NTC thermistor measurement DHT11 sensor DHT11 DUT The DHT11 measurement was a bit more interesting. I connected the oscilloscope to the data line of the DHT11 module, turned on the oscilloscope \"single trigger\" and let it take one sample of the sensor. The measurement shows that the bus is in idle state HIGH. The host (ESP32) then pulls the bus down for about 18ms, asking the sensor to deliver the measurement result. The sensor responds with a data burst of 4ms or less. In the burst, there is a space between each symbol in LOW mode about 52us. Bit value 0 is 25us HIGH, bit value 1 is 70us - assuming there is more zeros than the ones in the payload. Captured measurement, whole sequence My oscilloscope has some protocol decoders like I2C and 1-wire, but none of those were able to decode data. I used \"Edge intervals\" decoder for both rising and falling edges in order to get timing calculated. That decoder produced something visual (color bars) that can be read somehow rather easily. Payload on that sample seems to be 41 bit long \"0010000000000000000110010000001100111100\". That bit string has temperature and humidity information encoded either in analog sensor values \u200b\u200bor even as precalculated temperature degrees and humidity percentages. Sensor data. 0010000000000000000110010000001100111100, 41bits. Start marker. Around 15us HIGH + 85us LOW + 85us HIGH Space between each symbol. LOW around 52us. That translates to 0b010. Files Esp32.zip input_test.ino Final thoughts I didn't learn almost anything this week, but used too much time for making this documentation.","title":"8. Input devices"},{"location":"assignments/week08/#8-input-devices","text":"","title":"8. Input devices"},{"location":"assignments/week08/#assignment","text":"","title":"Assignment"},{"location":"assignments/week08/#individual-assignment","text":"Measure something: add a sensor to a microcontroller board that you have designed and read it","title":"Individual assignment"},{"location":"assignments/week08/#group-assignment","text":"Probe an input device's analog levels and digital signals","title":"Group assignment"},{"location":"assignments/week08/#new-week-new-board-esp32","text":"I decided to make a new circuit board with lots of I/O pins for this week. The intention is that I will cope with a new board throughout this course serie. I have been thinking of using the ESP32 circuit for the final project so I chose it as the microcontroller for the new board. Thus, I am already gaining experience with that microcontroller at the same. I designed the schematic and the PCB like in previous exercises with KiCad. I wanted to make the board as compact as possible, using surface mount technology and a single sided PCB. This posed some challenges, among other things, to the widths and clearances of the tracks used, which had to be made quite narrow. Another factor influencing the size of the tracks is the circuit board milling technology used, which also sets its own requirements. Because our lab has a decent circuit board milling machine, LPKF ProtoMat S62, I decided to use it to achieve a better end result and my requirements, and I didn\u2019t even try to use generic milling machine according to Fab Academy processes. Our milling machine generally uses a 0.2-0.5mm V-bit, based on which I selected 0.2mm clearance and 0.25mm track witdh. For the operating current tracks, I used a slightly bigger witdh. KiCad Schematic KiCad Net Classes KiCad PCB The ESP32 data sheet set some requirements such as operating voltage and minimum current \u200b\u200bas well as programming interface connections. The ESP32 requirement for operating current is 3.3V and at least 500mA. There were only 100mA and 1A regulators on the Fab Lab shelf so I used a 1A regulator. Other components required for power supply were found in the regulator data sheet. The reset and programming button connections with their peripherals are found from the ESP32 data sheet.","title":"New week, new board - ESP32"},{"location":"assignments/week08/#circuit-board-assembly","text":"Assembling the circuit board succeeded without major problems. ESP32 WROOM-32E, the module I used, was a little difficult to solder because the legs in it were like a 90-degree angle to the surface of the circuit board. Luckily, I had a QuadHands Jumbo Workbench in my home lab with which I got the circuit board at a suitable angle so that the soldering could be done with ease. Milled PCB Component assembly Schematic had 4.7uF capacitors in the regulator input and output as instructed by the regulator data sheet, but since there were no parts of that size on the shelf, I replaced them with 10uF when I assembled the circuit board.","title":"Circuit board assembly"},{"location":"assignments/week08/#circuit-board-testing","text":"After assembly, I did basic tests with a multimeter for possible short circuits. My USB serial port uses 5V voltages, so I started thinking if it would be safe to use due to too high a voltages. There was no concern with the operating voltage (Vcc) because the circuit board has a 3.3V regulator but the voltages on the TX/RX lines caused concern. There is no mention in the ESP32 data sheet whether those pins are 5V tolerant or not, so I had to find out if it is safe to plug TX/RX with that high voltage. Searching the internet I found information that all ESP32 digital I/O pins are 5V tolerant, although this is not explicitly mentioned in the data sheet. I connected USB serial port adapter to PCB normally, TX, RX, Vcc, GND. I checked the functionality of my board by trying to read the chip id with esptool. After a few attempts, it worked so I knew the circuit would work. Here I had to press the BOOT and EN buttons I had installed on the circuit board a few times. At the same time, it was found that the circuit enters programming mode when you hold down the BOOT button and resets the ESP32 with the EN button or by turning on the power. $ esptool --chip esp32 chip_id esptool.py v2.8 Found 1 serial ports Serial port /dev/ttyUSB0 Connecting..... Chip is ESP32D0WDQ6 (revision 1) Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None Crystal is 40MHz MAC: 24:6f:28:86:31:4c Uploading stub... Running stub... Stub running... Warning: ESP32 has no Chip ID. Reading MAC instead. MAC: 24:6f:28:86:31:4c Hard resetting via RTS pin... $","title":"Circuit board testing"},{"location":"assignments/week08/#temperature-sensors","text":"Since my final project is a weather station I decided to use temperature sensors as input devices. I installed two different temperature sensors, a DHT11 and a 10k NTC thermistor. The DHT11 was a ready-made module with one data line in addition to the operating power interface. NTC thermistor is connected using simple voltage divider circuit to the ESP32 ADC converter. NTC thermistor voltage divider I installed a DHT11 sensor on the IO26 pin and an NTC thermistor circuit on the IO4 pin which has the ADC converter. I decided to test the temperature sensors with a small snippet of code. For code development, I used Arduino where I installed ESP32 support with the Board Manager at: https://dl.espressif.com/dl/package_esp32_index.json . From Arduino IDE I selected board: Tools -> Board -> ESP32 Arduino -> ESP32 Dev Module For the DHT11 sensor, many libraries were found in the Arduino Library Manager, from which I installed the \"DHT sensor library for ESPx\" . I quickly tested the operation of the sensor with an example program coming with the library and it worked right away. However, I still had that another sensor circuit based on NTC thermistor so I started to study the operation of the ADC converter. I read the values \u200b\u200bof the ADC converter from the microcontroller with the analogRead() function and examined them. The values \u200b\u200breturned by the function changed when I heated the thermistor with my finger, so it worked more or less, although the read values \u200b\u200bseemed to be a little lower than expected. I assumed that the ADC converter returns values \u200b\u200b0-4095 (12-bit resolution) linearly depending on the voltage 0-3.3V connected to the pin. After researching for a while, I realized that there are quite a few configurable things in the ESP32 ADC converter, of which the analogSetAttenuation() function seemed to be quite significant. I connected the adjustable voltage source to the ADC converter and tested using different voltages what kind of values ADC returns. I measured the following maximum possible voltages for each attenuation configuration. analogSetAttenuation() max voltage measured ADC_0db 1.0V ADC_2_5db 1.3V ADC_6db 1.9V ADC_11db 3.1V ADC testing Judging from the values, it seems that the ADC of the circuit reads a maximum voltage of 1V, but attenuators are connected in front of the ADC converter, which can increase the value range of the input. Still, those readings and attenuations didn\u2019t really open up for me, but at this point I couldn\u2019t get to know the matter further. Since when heating the NTC with the ADC_6db setting, it still saturates the ADC converter, I used the ADC_11db setting and scaled the values \u200b\u200bto the measured 3.1V voltage so that I got about the correct values. That was enough at this point. I was able to read the values \u200b\u200bfrom the device via the serial port as text and graphs with the Arduino serial plotter function. Arduino temperature sensor graphs The graph shows how the values \u200b\u200bgiven by the sensors change as they are heated. I used a hot air gun so the highest readings should probably be somewhere near 80 degrees Celsius. #include \"DHTesp.h\" DHTesp dht11; void setup() { Serial.begin(115200); Serial.println(\"Temperature test, input week\"); // analogSetAttenuation(ADC_0db); // 1.0V max measured // analogSetAttenuation(ADC_2_5db); // 1.3V max measured // analogSetAttenuation(ADC_6db); // 1.9V max measured analogSetAttenuation(ADC_11db); // 3.1V max measured // Initialize DHT11 temperature sensor, IO26 dht11.setup(26, DHTesp::DHT11); } void loop() { // ESP32 default ADC resolution is 12 bits, values 0 - 4095. // If we assume curve is linear and all the other are correct then ADC value 0 is 0V // and value 4095 is 3.3V => analogRead() / 4095 * 3.3 = voltage on pin. Only in theory. // It is not that simple, see analogSetAttenuation()... // Read 10k NTC thermistor on IO4. It is connected as voltage divider, so at 25C it should be 0.5 * 3.3V = 1.65V unsigned int AdcValue = analogRead(4); // Get DHT11 data TempAndHumidity sensorData; sensorData = dht11.getTempAndHumidity(); // Output is scaled somehow weird in order to plot it using Arduino Serial Plotter Serial.println(\"DHT11_Temperature:\" + String(sensorData.temperature, 2) + \" DHT11_Humidity:\" + String(sensorData.humidity, 1) + \" NTC_analogRead/100:\" + String(AdcValue/100.0) + \" NTC_Voltagex10:\" + String(3.1/4095 * AdcValue * 10)); sleep(2); }","title":"Temperature sensors"},{"location":"assignments/week08/#oscilloscope-exercise","text":"I used an oscilloscope to measure the digital signal from the DHT11 sensor data line and the analog signal from the NTC thermistor circuit. I used LabNation SmartScope for measurements, which is a small oscilloscope with a USB connection. Measurement setup","title":"Oscilloscope exercise"},{"location":"assignments/week08/#ntc-thermistor-circuit","text":"NTC thermistor circuit DUT The voltage change from the NTC thermistor is not very interesting to measure with an oscilloscope, but it also got some curves - at least you can see how quickly it reacts to the temperature change. In this measurement I also used hot air gun. At 1m40, the graph shows how the voltage has risen to about 3.3V. From this it can be concluded that it is likely that the ADC is saturated and thus no actual temperature has been transmitted to the program, i.e. the voltage distribution used would not work for very high temperatures - maybe the same will happen for cold temperatures? NTC thermistor measurement","title":"NTC thermistor circuit"},{"location":"assignments/week08/#dht11-sensor","text":"DHT11 DUT The DHT11 measurement was a bit more interesting. I connected the oscilloscope to the data line of the DHT11 module, turned on the oscilloscope \"single trigger\" and let it take one sample of the sensor. The measurement shows that the bus is in idle state HIGH. The host (ESP32) then pulls the bus down for about 18ms, asking the sensor to deliver the measurement result. The sensor responds with a data burst of 4ms or less. In the burst, there is a space between each symbol in LOW mode about 52us. Bit value 0 is 25us HIGH, bit value 1 is 70us - assuming there is more zeros than the ones in the payload. Captured measurement, whole sequence My oscilloscope has some protocol decoders like I2C and 1-wire, but none of those were able to decode data. I used \"Edge intervals\" decoder for both rising and falling edges in order to get timing calculated. That decoder produced something visual (color bars) that can be read somehow rather easily. Payload on that sample seems to be 41 bit long \"0010000000000000000110010000001100111100\". That bit string has temperature and humidity information encoded either in analog sensor values \u200b\u200bor even as precalculated temperature degrees and humidity percentages. Sensor data. 0010000000000000000110010000001100111100, 41bits. Start marker. Around 15us HIGH + 85us LOW + 85us HIGH Space between each symbol. LOW around 52us. That translates to 0b010.","title":"DHT11 sensor"},{"location":"assignments/week08/#files","text":"Esp32.zip input_test.ino","title":"Files"},{"location":"assignments/week08/#final-thoughts","text":"I didn't learn almost anything this week, but used too much time for making this documentation.","title":"Final thoughts"},{"location":"assignments/week09/","text":"9. Output devices Assignment Individual assignment Add an output device to a microcontroller board you've designed and program it to do something. Group assignment Measure the power consumption of an output device TFT display This week I decided to add a display to the thermometer I made the previous week. I compared the displays on the Fab Lab component rack and ended up with a 2.4\" SPI TFT Module (SKU: MSP2402) because it seemed interesting and had an SPI bus that I have a little less experience than the I2C bus. The ESP32 board I made last week also has enough I/O pins to connect the display so there is no problem either. The display has an ILI9341 control chip and a resolution of 240x320. The display module also has an SD card reader and a touch screen which I did not intend to use however. Display wiring I followed the instructions on techtutorialsx - ESP32: ILI9341 Display Hello world to connect and test display. I connected the data lines of the display as shown by following schematic. Display wiring #define TFT_SCK 19 #define TFT_MOSI 18 #define TFT_MISO 22 #define TFT_CS 4 #define TFT_DC 17 #define TFT_RESET 16 #define TFT_LED 21 The display backlight is not controlled through the library but directly from my test program. It can be feed with voltages 0-3.3V to obtain different brightnesses for the backlight. I connected the backlight directly to the normal I/O pin, allowing the light to be turned on or off by the ESP32. When connecting to the DAC output, the brightness could be adjusted by adjusting voltage levels, but I didn't do it now. Display library for Arduino I installed GFX Library for Arduino from the Arduino Library Manager. GFX Library for Arduino Test code I added the initialization of the display according to the instructions of techtutorialsx - ESP32: ILI9341 Display Hello world to the program I made during the input week. The backlight did not illuminate because the backlight currents were wired from the I/O pin which could not be controlled through the display library. So I coded the I/O pin used for display backlight to HIGH mode to supply power. I tested the screen by printing \"Hello World\" and it worked. I then tested to change the display background colors, text size, text color, and rotated the screen horizontally because it was by default in the vertical position. Once the display was working and I had tested the basics I added logic that prints the temperature and humidity from the DHT11 sensor to the display. The board has a push button on the IO4 pin that puts the ESP32 chip into programming mode when the button is pressed during chip start. I got the idea to add logic to this button that it turns the display backlight on/off while the device is running, so I added it. Connected display #include \"DHTesp.h\" #include <Arduino_GFX_Library.h> DHTesp dht11; // TFT - ESP32 dispay data pins used #define TFT_SCK 19 #define TFT_MOSI 18 #define TFT_MISO 22 #define TFT_CS 4 #define TFT_DC 17 #define TFT_RESET 16 #define TFT_LED 21 // https://techtutorialsx.com/2021/01/31/esp32-ili9341-display-hello-world/ Arduino_ESP32SPI bus = Arduino_ESP32SPI(TFT_DC, TFT_CS, TFT_SCK, TFT_MOSI, TFT_MISO); Arduino_ILI9341 display = Arduino_ILI9341(&bus, TFT_RESET); void setup() { Serial.begin(115200); Serial.println(\"TFT test, output week\"); // Initialize DHT11 temperature sensor, IO26 dht11.setup(26, DHTesp::DHT11); // Power on TFT display light pinMode(TFT_LED, OUTPUT); digitalWrite(TFT_LED, HIGH); // Initialize TFT display display.begin(); // Init display.setTextSize(3); display.setTextColor(WHITE); display.setRotation(1); // Horizontal } void loop() { TempAndHumidity sensorData; sensorData = dht11.getTempAndHumidity(); Serial.println(\"DHT11 Temperature:\" + String(sensorData.temperature, 2) + \" Humidity:\" + String(sensorData.humidity, 1)); // Use BOOT button to toggle TFT display light ON/OFF if (!digitalRead(0)) digitalWrite(TFT_LED, !digitalRead(TFT_LED)); display.setCursor(0, 10); display.fillScreen(BLACK); display.print(\"Sensor DHT11:\\n\" \"Temperature \" + String(sensorData.temperature, 1) + \"C\\n\" + \"Humidity \" + String(sensorData.humidity, 1) + \"%\"); sleep(2); } TFT display power consumption Measurement setup I measured the power consumed by the display with a YZXStudio ZY1266 USB power meter. I connected the meter to the USB cable between the computer and the USB-serial adapter and performed 4 different power measurements: display on with black background, display on with white background, display off by I/O, and display completely disconnected (all wires disconnected physically). From these results, the current consumed by the display can be calculated. power consumption operation mode 0.67W display on, black background 0.67W display on, white background 0.37W display LED off, LED pin 0V 0.33W display physically removed YZXStudio ZY1266 USB power meter From the measurement results, it can be calculated that the display consumes about 0.34W of power (0.67W - 0.33W = 0.34W), which is about half of the whole hardware. It is noteworthy that the measurements also include the power consumption of the USB-serial adapter - I did not measure a value for it, but presumably it is small compared to other components. Files ili9341_tft_test.ino Final thoughts I have a fair amount of previous experience with microcontrollers and embedded devices, so I didn\u2019t learn much new this week either. This time, however, the workload remained reasonable, which I am pleased with.","title":"9. Output devices"},{"location":"assignments/week09/#9-output-devices","text":"","title":"9. Output devices"},{"location":"assignments/week09/#assignment","text":"","title":"Assignment"},{"location":"assignments/week09/#individual-assignment","text":"Add an output device to a microcontroller board you've designed and program it to do something.","title":"Individual assignment"},{"location":"assignments/week09/#group-assignment","text":"Measure the power consumption of an output device","title":"Group assignment"},{"location":"assignments/week09/#tft-display","text":"This week I decided to add a display to the thermometer I made the previous week. I compared the displays on the Fab Lab component rack and ended up with a 2.4\" SPI TFT Module (SKU: MSP2402) because it seemed interesting and had an SPI bus that I have a little less experience than the I2C bus. The ESP32 board I made last week also has enough I/O pins to connect the display so there is no problem either. The display has an ILI9341 control chip and a resolution of 240x320. The display module also has an SD card reader and a touch screen which I did not intend to use however.","title":"TFT display"},{"location":"assignments/week09/#display-wiring","text":"I followed the instructions on techtutorialsx - ESP32: ILI9341 Display Hello world to connect and test display. I connected the data lines of the display as shown by following schematic. Display wiring #define TFT_SCK 19 #define TFT_MOSI 18 #define TFT_MISO 22 #define TFT_CS 4 #define TFT_DC 17 #define TFT_RESET 16 #define TFT_LED 21 The display backlight is not controlled through the library but directly from my test program. It can be feed with voltages 0-3.3V to obtain different brightnesses for the backlight. I connected the backlight directly to the normal I/O pin, allowing the light to be turned on or off by the ESP32. When connecting to the DAC output, the brightness could be adjusted by adjusting voltage levels, but I didn't do it now.","title":"Display wiring"},{"location":"assignments/week09/#display-library-for-arduino","text":"I installed GFX Library for Arduino from the Arduino Library Manager. GFX Library for Arduino","title":"Display library for Arduino"},{"location":"assignments/week09/#test-code","text":"I added the initialization of the display according to the instructions of techtutorialsx - ESP32: ILI9341 Display Hello world to the program I made during the input week. The backlight did not illuminate because the backlight currents were wired from the I/O pin which could not be controlled through the display library. So I coded the I/O pin used for display backlight to HIGH mode to supply power. I tested the screen by printing \"Hello World\" and it worked. I then tested to change the display background colors, text size, text color, and rotated the screen horizontally because it was by default in the vertical position. Once the display was working and I had tested the basics I added logic that prints the temperature and humidity from the DHT11 sensor to the display. The board has a push button on the IO4 pin that puts the ESP32 chip into programming mode when the button is pressed during chip start. I got the idea to add logic to this button that it turns the display backlight on/off while the device is running, so I added it. Connected display #include \"DHTesp.h\" #include <Arduino_GFX_Library.h> DHTesp dht11; // TFT - ESP32 dispay data pins used #define TFT_SCK 19 #define TFT_MOSI 18 #define TFT_MISO 22 #define TFT_CS 4 #define TFT_DC 17 #define TFT_RESET 16 #define TFT_LED 21 // https://techtutorialsx.com/2021/01/31/esp32-ili9341-display-hello-world/ Arduino_ESP32SPI bus = Arduino_ESP32SPI(TFT_DC, TFT_CS, TFT_SCK, TFT_MOSI, TFT_MISO); Arduino_ILI9341 display = Arduino_ILI9341(&bus, TFT_RESET); void setup() { Serial.begin(115200); Serial.println(\"TFT test, output week\"); // Initialize DHT11 temperature sensor, IO26 dht11.setup(26, DHTesp::DHT11); // Power on TFT display light pinMode(TFT_LED, OUTPUT); digitalWrite(TFT_LED, HIGH); // Initialize TFT display display.begin(); // Init display.setTextSize(3); display.setTextColor(WHITE); display.setRotation(1); // Horizontal } void loop() { TempAndHumidity sensorData; sensorData = dht11.getTempAndHumidity(); Serial.println(\"DHT11 Temperature:\" + String(sensorData.temperature, 2) + \" Humidity:\" + String(sensorData.humidity, 1)); // Use BOOT button to toggle TFT display light ON/OFF if (!digitalRead(0)) digitalWrite(TFT_LED, !digitalRead(TFT_LED)); display.setCursor(0, 10); display.fillScreen(BLACK); display.print(\"Sensor DHT11:\\n\" \"Temperature \" + String(sensorData.temperature, 1) + \"C\\n\" + \"Humidity \" + String(sensorData.humidity, 1) + \"%\"); sleep(2); }","title":"Test code"},{"location":"assignments/week09/#tft-display-power-consumption","text":"Measurement setup I measured the power consumed by the display with a YZXStudio ZY1266 USB power meter. I connected the meter to the USB cable between the computer and the USB-serial adapter and performed 4 different power measurements: display on with black background, display on with white background, display off by I/O, and display completely disconnected (all wires disconnected physically). From these results, the current consumed by the display can be calculated. power consumption operation mode 0.67W display on, black background 0.67W display on, white background 0.37W display LED off, LED pin 0V 0.33W display physically removed YZXStudio ZY1266 USB power meter From the measurement results, it can be calculated that the display consumes about 0.34W of power (0.67W - 0.33W = 0.34W), which is about half of the whole hardware. It is noteworthy that the measurements also include the power consumption of the USB-serial adapter - I did not measure a value for it, but presumably it is small compared to other components.","title":"TFT display power consumption"},{"location":"assignments/week09/#files","text":"ili9341_tft_test.ino","title":"Files"},{"location":"assignments/week09/#final-thoughts","text":"I have a fair amount of previous experience with microcontrollers and embedded devices, so I didn\u2019t learn much new this week either. This time, however, the workload remained reasonable, which I am pleased with.","title":"Final thoughts"},{"location":"assignments/week10/","text":"10. Embedded programming Assignment Individual assignment Read the data sheet for your microcontroller Use your programmer to program your board to do something Extra credit: try other programming languages and development environments SWD programmer UPDI programmer AVR ISP Group assignment Compare the performance and development workflows for other architectures Document your work to the group work page and reflect on your individual page what you learned Final thoughts I skipped over this week because I have more than enough experience on the subject.","title":"10. Embedded programming"},{"location":"assignments/week10/#10-embedded-programming","text":"","title":"10. Embedded programming"},{"location":"assignments/week10/#assignment","text":"","title":"Assignment"},{"location":"assignments/week10/#individual-assignment","text":"Read the data sheet for your microcontroller Use your programmer to program your board to do something Extra credit: try other programming languages and development environments SWD programmer UPDI programmer AVR ISP","title":"Individual assignment"},{"location":"assignments/week10/#group-assignment","text":"Compare the performance and development workflows for other architectures Document your work to the group work page and reflect on your individual page what you learned","title":"Group assignment"},{"location":"assignments/week10/#final-thoughts","text":"I skipped over this week because I have more than enough experience on the subject.","title":"Final thoughts"},{"location":"assignments/week11/","text":"11. Interface and application programming Assignment Individual assignment write an application that interfaces a user with an input &/or output device that you made Group assignment compare as many tool options as possible Final thoughts I skipped over this week because I have more than enough experience on the subject.","title":"11. Interface and application programming"},{"location":"assignments/week11/#11-interface-and-application-programming","text":"","title":"11. Interface and application programming"},{"location":"assignments/week11/#assignment","text":"","title":"Assignment"},{"location":"assignments/week11/#individual-assignment","text":"write an application that interfaces a user with an input &/or output device that you made","title":"Individual assignment"},{"location":"assignments/week11/#group-assignment","text":"compare as many tool options as possible","title":"Group assignment"},{"location":"assignments/week11/#final-thoughts","text":"I skipped over this week because I have more than enough experience on the subject.","title":"Final thoughts"},{"location":"assignments/week12/","text":"12. Applications and implications Assignment Individual assignment Propose a final project masterpiece that integrates the range of units covered, answering: What will it do? Who's done what beforehand? What will you design? What materials and components will be used? Where will come from? How much will they cost? What parts and systems will be made? What processes will be used? What questions need to be answered? How will it be evaluated? Your project should incorporate: 2D and 3D design Additive and subtractive fabrication processes Electronics design and production Microcontroller interfacing and programming System integration and packaging. Where possible, you should make rather than buy the parts of your project Final thoughts I skipped over this week. The topic still seem to be necessary for the final project so those need to be studied later...","title":"12. Applications and implications"},{"location":"assignments/week12/#12-applications-and-implications","text":"","title":"12. Applications and implications"},{"location":"assignments/week12/#assignment","text":"","title":"Assignment"},{"location":"assignments/week12/#individual-assignment","text":"Propose a final project masterpiece that integrates the range of units covered, answering: What will it do? Who's done what beforehand? What will you design? What materials and components will be used? Where will come from? How much will they cost? What parts and systems will be made? What processes will be used? What questions need to be answered? How will it be evaluated? Your project should incorporate: 2D and 3D design Additive and subtractive fabrication processes Electronics design and production Microcontroller interfacing and programming System integration and packaging. Where possible, you should make rather than buy the parts of your project","title":"Individual assignment"},{"location":"assignments/week12/#final-thoughts","text":"I skipped over this week. The topic still seem to be necessary for the final project so those need to be studied later...","title":"Final thoughts"},{"location":"assignments/week13/","text":"13. Networking and communications Assignment Individual assignment design, build, and connect wired or wireless node(s) with network or bus addresses Group assignment send a message between two projects Final thoughts I skipped over this week because I have more than enough experience on the subject.","title":"13. Networking and communications"},{"location":"assignments/week13/#13-networking-and-communications","text":"","title":"13. Networking and communications"},{"location":"assignments/week13/#assignment","text":"","title":"Assignment"},{"location":"assignments/week13/#individual-assignment","text":"design, build, and connect wired or wireless node(s) with network or bus addresses","title":"Individual assignment"},{"location":"assignments/week13/#group-assignment","text":"send a message between two projects","title":"Group assignment"},{"location":"assignments/week13/#final-thoughts","text":"I skipped over this week because I have more than enough experience on the subject.","title":"Final thoughts"},{"location":"assignments/week14/","text":"14. 3D Scanning and Printing Assignment Individual assignment ? Group assignment Test the design rules for your 3D printer(s) 3D printer tests - group work Test done by Kecheng Zhang and Antti Palosaari. Different 3D printers have different features due to the operating principles of the devices, the mechanics used, and the software used. We tested 3 different devices: Formlabs Form 3+, Stratasys Fortus 380mc and Raise3D Pro2. Pro2 was tested twice with different sized nozzles, 0.4mm and 0.8mm. There are a lot of settings in the printer settings that affect print quality in one direction or another, but the tests performed were intended to provide some insight into the capabilities of the printers in use. Stratasys Fortus 380mc Stratasys Fortus 380mc Build volume: 356\u00d7305\u00d7305 mm Printing technology: Fused filament fabrication (FFF) Does not support PLA filament? Raise3D Pro2 Raise3D Pro2 Build volume: 305\u00d7305\u00d7300 mm Printing technology: Fused filament fabrication (FFF) Formlabs Form 3+ Formlabs Form 3+ Build volume: 145 \u00d7 145 \u00d7 185 mm Printing technology: Stereolithography (SLA) Test results printer nozzle filament Fortus 380mc 0.4 mm ABS Form 3+ 0.08 mm Tough 1500 Resin Pro2 0.4 mm PLA Pro2 0.8 mm PLA OVERHANG \u2264 1mm \u2264 6mm \u2264 1mm \u2264 2mm OVERHANG ANGLE \u2265 30\u00b0 - \u2265 20\u00b0 \u2265 20\u00b0 CLEARANCE \u2265 0.3mm \u2265 0.6mm \u2265 0.2mm \u2265 1.0mm fails totally BRIDGE / SPAN \u2264 14mm - \u2264 18mm \u2264 20mm WALL THICKNESS \u2265 0.3mm - \u2265 0.2mm \u2265 0.4mm GAP \u2265 0.3mm - \u2265 0.1mm \u2265 2mm DIMENSION 9.70/10.0mm - 9.97/10.0mm 9.20/10.0mm SURFACE FINNISH 7/10 10/10 [*] 8/10 1/10 [*] The surface finish is best with the Formlabs Form 3+ printer, although we did not perform a similar surface test on it. The smoothness of the surface is clearly visible from other printed test pieces. Stratasys Fortus 380mc Formlabs Form 3+ Formlabs Form 3+ overhang Raise3D Pro2, 0.4mm nozzle Raise3D Pro2, 0.8mm nozzle Raise3D Pro2 with 0.4mm nozzle does very nice looking print! 3D Design Pokeball As a 3D printing exercise, I designed a simple Pokemon ball. In the designed ball, the requirement for the exercise task is met by the hinge structure used. The pin of the hinge goes inside the hinge so that it cannot be installed there when manufactured from separate parts. Pokeball The ball is like a box with lids connected by a hinge. The object consists of 3 parts, the upper half, the lower half and the hinge pin. All parts are printed at once so that they are mechanically connected during the printing phase. As a ball model, I used a factory-made toy Pokemon ball. I didn\u2019t care to model the existing Pokemon ball very accurately but made the simplest possible version of it that met the criteria for the exercise task. First, I created the top side of the ball with FreeCAD. I created a half ball with the Additive Sphere tool I drew the hinge Sketch and created a pad from it I used the LinearPattern tool to Duplicate the hinge I removed the inside of the ball with the Subractive Sphere tool Pokeball top part Pokeball hinge sketch The top and bottom of the ball are symmetrical so I created the bottom body by copying the top body, ctrl-c + ctrl-v. The bottom body created by copying had to be rotated to the correct position - select body, mouse right-click, select Transform. It is essential to get the top and bottom hinges fully in place, although it was not difficult with that tool because the rotations required are 180 degrees around the axes. Pokeball bottom part The pin of the hinge had to be created as its own body because it is a separate part and is not attached to other parts. The pin had to be connected to the hinge frame somehow so that its position could be bound to the coordinates of the 3D model. I used the Binder tool to transfer geometry from one body to another body. Pokeball hinge binder With Binder, I attached the hinge body from the top of the ball to the hinge pin body. I drew the pin of the hinge using a sketch and made a pad of it. When dimensioning the hinge, I used a clearance value of 0.2mm, which means that the hole in the hinge is 0.4mm larger in diameter than the pin. The value is easy to change from the Spreadsheet tab as needed - as are almost all other values \u200b\u200bbecause the model is comprehensively parameterized. Pokeball hinge pin The finished Pokemon ball was in bad shape for 3D printing. To print, the halves of the ball had to open 180 degrees. I did this in the Draft workbench with the Rotate tool. The Rotate tool works in the 2D plane so the ball first had to be placed at the right angle in the 2D plane. At the end of the hinge pin is a surface in the correct position to which the 2D plane can be synchronized - Utilities-> SelectPlane sets the plane to this surface. Set the Snap Center option to On to select the center of rotation of the hinge pin center. Use the Modification-> Rotate tool to open the ball halves. Pokeball rotate Pokeball rotated open for printing I saved the opened ball in .STL format and printed several more and less successful versions of it. I used Raise3D Pro2 and Creality Ender 3 V2 printers. Pokeballs. Blue one is factory made. Final thoughts Hello World.","title":"14. 3D Scanning and Printing"},{"location":"assignments/week14/#14-3d-scanning-and-printing","text":"","title":"14. 3D Scanning and Printing"},{"location":"assignments/week14/#assignment","text":"","title":"Assignment"},{"location":"assignments/week14/#individual-assignment","text":"?","title":"Individual assignment"},{"location":"assignments/week14/#group-assignment","text":"Test the design rules for your 3D printer(s)","title":"Group assignment"},{"location":"assignments/week14/#3d-printer-tests-group-work","text":"Test done by Kecheng Zhang and Antti Palosaari. Different 3D printers have different features due to the operating principles of the devices, the mechanics used, and the software used. We tested 3 different devices: Formlabs Form 3+, Stratasys Fortus 380mc and Raise3D Pro2. Pro2 was tested twice with different sized nozzles, 0.4mm and 0.8mm. There are a lot of settings in the printer settings that affect print quality in one direction or another, but the tests performed were intended to provide some insight into the capabilities of the printers in use.","title":"3D printer tests - group work"},{"location":"assignments/week14/#stratasys-fortus-380mc","text":"Stratasys Fortus 380mc Build volume: 356\u00d7305\u00d7305 mm Printing technology: Fused filament fabrication (FFF) Does not support PLA filament?","title":"Stratasys Fortus 380mc"},{"location":"assignments/week14/#raise3d-pro2","text":"Raise3D Pro2 Build volume: 305\u00d7305\u00d7300 mm Printing technology: Fused filament fabrication (FFF)","title":"Raise3D Pro2"},{"location":"assignments/week14/#formlabs-form-3","text":"Formlabs Form 3+ Build volume: 145 \u00d7 145 \u00d7 185 mm Printing technology: Stereolithography (SLA)","title":"Formlabs Form 3+"},{"location":"assignments/week14/#test-results","text":"printer nozzle filament Fortus 380mc 0.4 mm ABS Form 3+ 0.08 mm Tough 1500 Resin Pro2 0.4 mm PLA Pro2 0.8 mm PLA OVERHANG \u2264 1mm \u2264 6mm \u2264 1mm \u2264 2mm OVERHANG ANGLE \u2265 30\u00b0 - \u2265 20\u00b0 \u2265 20\u00b0 CLEARANCE \u2265 0.3mm \u2265 0.6mm \u2265 0.2mm \u2265 1.0mm fails totally BRIDGE / SPAN \u2264 14mm - \u2264 18mm \u2264 20mm WALL THICKNESS \u2265 0.3mm - \u2265 0.2mm \u2265 0.4mm GAP \u2265 0.3mm - \u2265 0.1mm \u2265 2mm DIMENSION 9.70/10.0mm - 9.97/10.0mm 9.20/10.0mm SURFACE FINNISH 7/10 10/10 [*] 8/10 1/10 [*] The surface finish is best with the Formlabs Form 3+ printer, although we did not perform a similar surface test on it. The smoothness of the surface is clearly visible from other printed test pieces. Stratasys Fortus 380mc Formlabs Form 3+ Formlabs Form 3+ overhang Raise3D Pro2, 0.4mm nozzle Raise3D Pro2, 0.8mm nozzle Raise3D Pro2 with 0.4mm nozzle does very nice looking print!","title":"Test results"},{"location":"assignments/week14/#3d-design-pokeball","text":"As a 3D printing exercise, I designed a simple Pokemon ball. In the designed ball, the requirement for the exercise task is met by the hinge structure used. The pin of the hinge goes inside the hinge so that it cannot be installed there when manufactured from separate parts. Pokeball The ball is like a box with lids connected by a hinge. The object consists of 3 parts, the upper half, the lower half and the hinge pin. All parts are printed at once so that they are mechanically connected during the printing phase. As a ball model, I used a factory-made toy Pokemon ball. I didn\u2019t care to model the existing Pokemon ball very accurately but made the simplest possible version of it that met the criteria for the exercise task. First, I created the top side of the ball with FreeCAD. I created a half ball with the Additive Sphere tool I drew the hinge Sketch and created a pad from it I used the LinearPattern tool to Duplicate the hinge I removed the inside of the ball with the Subractive Sphere tool Pokeball top part Pokeball hinge sketch The top and bottom of the ball are symmetrical so I created the bottom body by copying the top body, ctrl-c + ctrl-v. The bottom body created by copying had to be rotated to the correct position - select body, mouse right-click, select Transform. It is essential to get the top and bottom hinges fully in place, although it was not difficult with that tool because the rotations required are 180 degrees around the axes. Pokeball bottom part The pin of the hinge had to be created as its own body because it is a separate part and is not attached to other parts. The pin had to be connected to the hinge frame somehow so that its position could be bound to the coordinates of the 3D model. I used the Binder tool to transfer geometry from one body to another body. Pokeball hinge binder With Binder, I attached the hinge body from the top of the ball to the hinge pin body. I drew the pin of the hinge using a sketch and made a pad of it. When dimensioning the hinge, I used a clearance value of 0.2mm, which means that the hole in the hinge is 0.4mm larger in diameter than the pin. The value is easy to change from the Spreadsheet tab as needed - as are almost all other values \u200b\u200bbecause the model is comprehensively parameterized. Pokeball hinge pin The finished Pokemon ball was in bad shape for 3D printing. To print, the halves of the ball had to open 180 degrees. I did this in the Draft workbench with the Rotate tool. The Rotate tool works in the 2D plane so the ball first had to be placed at the right angle in the 2D plane. At the end of the hinge pin is a surface in the correct position to which the 2D plane can be synchronized - Utilities-> SelectPlane sets the plane to this surface. Set the Snap Center option to On to select the center of rotation of the hinge pin center. Use the Modification-> Rotate tool to open the ball halves. Pokeball rotate Pokeball rotated open for printing I saved the opened ball in .STL format and printed several more and less successful versions of it. I used Raise3D Pro2 and Creality Ender 3 V2 printers. Pokeballs. Blue one is factory made.","title":"3D Design Pokeball"},{"location":"assignments/week14/#final-thoughts","text":"Hello World.","title":"Final thoughts"},{"location":"assignments/week15/","text":"15. Molding and Casting Assignment Individual assignment Design a mold around the stock and tooling that you'll be using, mill it (rough cut + three-axis finish cut), and use it to cast parts Group assignment Review the safety data sheets for each of your molding and casting materials, then make and compare test casts with each of them Making Pokeball As a casting exercise, I made a plastic mold and casted a Pokemon ball that I had previously designed as a 3D printing exercise. The process went through the following steps: I milled a wax mold from a 3D model of a Pokemon ball I made a silicone mold into a wax mold I made a plastic cast into a silicone mold Making a wax mold I made the wax mold with a Roland monoFab SRM-20 milling machine using Roland MODELA Player 4 application. I imported into the MODELA Player 4 a previously designed Pokemon ball that was in .stl format. The Pokemon ball was in its closed position, so it was completely ball shaped except for the hinges. The size of the ball was reduced to about 35mm in diameter. Due to the shape of the object, I had to create two molds - a top and a bottom. The application knew how to make two molds directly from the model, so I created \"Top Surface\" and \"Bottom Surface\" with it. To each of these Surfaces I added the \"Roughing\" and \"Finishing\" processes, which are practically milling toolpaths. The roughing process mills the mold shapes and finishing is for surface finishing. As a milling tool, I defined and used a 3mm ball mill for each process. This was a slightly poor choice because the mill in question could not cut the edges quite straight from the bottom of the mold due to the ball shape of the mill, resulting in a casting seam about 1mm high into the final ball. Resize Pokemon ball In creating the process, I changed the \"Set the cutting area and depth\" setting to \"Partial\" and divided the \"Depth\" by two. The 3D model is an entire ball, but the mold is only half of it. I selected \"Modeling Wax\" and the tool \"R1.5 Ball\" as the material, based on which the program selected the appropriate milling settings. Used material and tool definitions were made by someone else on our FabLab for that machine. Create milling process Select half of ball Select 3mm ball milling bit MODELA Player 4 created 4 toolpaths for SRM-20 milling machine, \"Roughing\" and \"Finishing\" for both the top and bottom of the ball from the above definitions. I covered the milling machine bed with masking tape and glued the wax mold with hot glue to that tape. The tape is used for protecting the bed from glue splashes. I used the VPanel for SRM-20 program to drive the cutter. I installed the specified mill bit on the milling machine and calibrated the X/Y/Z origin. I loaded the toolpaths made in MODELA Player 4 into the VPanel app and first milled the other half of the ball into the wax mold. I recalibrated the origin and milled the other half of the ball next to the previous one. Mill wax mold using VPanel for SRM-20 Making a silicone rubber mold After making the wax mold, I started making silicone rubber molds. Our Fab Lab had OOMOO 25 and Smooth\u2011Sil\u202f940 silicone manufactured by Smooth-On, from which I selected Smooth\u2011Sil\u202f940. The silicone used is mixed from the two components A and B by weight in a ratio of 100A:10B. Smooth-On Smooth\u2011Sil 940 I switch on laboratory ventilation, wear protective clothing, safety goggles and vinyl gloves. I added the required amount of component A to the plastic cup and then added the required amount of component B, measuring the correct amount with a small scale. Smooth\u2011Sil 940 mix A Smooth\u2011Sil 940 mix A+B I mixed it thoroughly and put it to vacuum pump for degassing for a while. Smooth\u2011Sil 940 vacuum degassing Finally, I casted silicone into my wax mold. The silicone was left a little over so I casted the rest into another test mold which I had milled into the same wax mold. Cure time for the silicone used was 24 hours so I left the casting to dry overnight in the lab. Wax mold Wax mold, silicone casted The next day I took the casting out of the mold a little ahead of time, about after 20h drying. Silicone rubber is a flexible material and came off the wax mold easily. Silicone rubber molds The silicone rubber mold for the Pokemon ball is double-sided and had no filler hole, so after thinking, I decided to drill a filler hole into it with a small column drill. The mold was ready. Drill fill hole Final thoughts Hello World.","title":"15. Molding and Casting"},{"location":"assignments/week15/#15-molding-and-casting","text":"","title":"15. Molding and Casting"},{"location":"assignments/week15/#assignment","text":"","title":"Assignment"},{"location":"assignments/week15/#individual-assignment","text":"Design a mold around the stock and tooling that you'll be using, mill it (rough cut + three-axis finish cut), and use it to cast parts","title":"Individual assignment"},{"location":"assignments/week15/#group-assignment","text":"Review the safety data sheets for each of your molding and casting materials, then make and compare test casts with each of them","title":"Group assignment"},{"location":"assignments/week15/#making-pokeball","text":"As a casting exercise, I made a plastic mold and casted a Pokemon ball that I had previously designed as a 3D printing exercise. The process went through the following steps: I milled a wax mold from a 3D model of a Pokemon ball I made a silicone mold into a wax mold I made a plastic cast into a silicone mold","title":"Making Pokeball"},{"location":"assignments/week15/#making-a-wax-mold","text":"I made the wax mold with a Roland monoFab SRM-20 milling machine using Roland MODELA Player 4 application. I imported into the MODELA Player 4 a previously designed Pokemon ball that was in .stl format. The Pokemon ball was in its closed position, so it was completely ball shaped except for the hinges. The size of the ball was reduced to about 35mm in diameter. Due to the shape of the object, I had to create two molds - a top and a bottom. The application knew how to make two molds directly from the model, so I created \"Top Surface\" and \"Bottom Surface\" with it. To each of these Surfaces I added the \"Roughing\" and \"Finishing\" processes, which are practically milling toolpaths. The roughing process mills the mold shapes and finishing is for surface finishing. As a milling tool, I defined and used a 3mm ball mill for each process. This was a slightly poor choice because the mill in question could not cut the edges quite straight from the bottom of the mold due to the ball shape of the mill, resulting in a casting seam about 1mm high into the final ball. Resize Pokemon ball In creating the process, I changed the \"Set the cutting area and depth\" setting to \"Partial\" and divided the \"Depth\" by two. The 3D model is an entire ball, but the mold is only half of it. I selected \"Modeling Wax\" and the tool \"R1.5 Ball\" as the material, based on which the program selected the appropriate milling settings. Used material and tool definitions were made by someone else on our FabLab for that machine. Create milling process Select half of ball Select 3mm ball milling bit MODELA Player 4 created 4 toolpaths for SRM-20 milling machine, \"Roughing\" and \"Finishing\" for both the top and bottom of the ball from the above definitions. I covered the milling machine bed with masking tape and glued the wax mold with hot glue to that tape. The tape is used for protecting the bed from glue splashes. I used the VPanel for SRM-20 program to drive the cutter. I installed the specified mill bit on the milling machine and calibrated the X/Y/Z origin. I loaded the toolpaths made in MODELA Player 4 into the VPanel app and first milled the other half of the ball into the wax mold. I recalibrated the origin and milled the other half of the ball next to the previous one. Mill wax mold using VPanel for SRM-20","title":"Making a wax mold"},{"location":"assignments/week15/#making-a-silicone-rubber-mold","text":"After making the wax mold, I started making silicone rubber molds. Our Fab Lab had OOMOO 25 and Smooth\u2011Sil\u202f940 silicone manufactured by Smooth-On, from which I selected Smooth\u2011Sil\u202f940. The silicone used is mixed from the two components A and B by weight in a ratio of 100A:10B. Smooth-On Smooth\u2011Sil 940 I switch on laboratory ventilation, wear protective clothing, safety goggles and vinyl gloves. I added the required amount of component A to the plastic cup and then added the required amount of component B, measuring the correct amount with a small scale. Smooth\u2011Sil 940 mix A Smooth\u2011Sil 940 mix A+B I mixed it thoroughly and put it to vacuum pump for degassing for a while. Smooth\u2011Sil 940 vacuum degassing Finally, I casted silicone into my wax mold. The silicone was left a little over so I casted the rest into another test mold which I had milled into the same wax mold. Cure time for the silicone used was 24 hours so I left the casting to dry overnight in the lab. Wax mold Wax mold, silicone casted The next day I took the casting out of the mold a little ahead of time, about after 20h drying. Silicone rubber is a flexible material and came off the wax mold easily. Silicone rubber molds The silicone rubber mold for the Pokemon ball is double-sided and had no filler hole, so after thinking, I decided to drill a filler hole into it with a small column drill. The mold was ready. Drill fill hole","title":"Making a silicone rubber mold"},{"location":"assignments/week15/#final-thoughts","text":"Hello World.","title":"Final thoughts"}]}