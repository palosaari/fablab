{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Me Hello. I am Antti, CSE student from University of Oulu. This is my student blog for the Fab Lab Oulu Course. My main motivation to take that course was to learn how to design and implement mechanical parts using modern tools like 3D-printers and laser cutters. I am interested of many kind electronics, especially embedded devices. One particular thing that has had on my mind long time is antenna array of 8 phased half-wave dipoles. Possible implementation methods could be PCB antenna or aluminum laser(?) cutted antenna thus I need to learn some needed tools.","title":"About Me"},{"location":"#about-me","text":"Hello. I am Antti, CSE student from University of Oulu. This is my student blog for the Fab Lab Oulu Course. My main motivation to take that course was to learn how to design and implement mechanical parts using modern tools like 3D-printers and laser cutters. I am interested of many kind electronics, especially embedded devices. One particular thing that has had on my mind long time is antenna array of 8 phased half-wave dipoles. Possible implementation methods could be PCB antenna or aluminum laser(?) cutted antenna thus I need to learn some needed tools.","title":"About Me"},{"location":"assignments/week01/","text":"1. Principles and practices Too many interesting projects on my mind... ...I would say weather station is most interesting, but also it is very challenging if amount of used sensors are very many. However, you can start with simple one first and add more later. Here comes short specs for each of those. Outdoor weather station Design and manufacture feature rich outdoor weather station. More sensors the better. Operating power could be taken from solar panels or wind turbine if electricity is not available. Communication by some wireless method, WiFi, LoRa, etc. Temperature Humidity Atmospheric pressure Wind speed Rainfall Seismometer Fog meter A lot of commercial solutions exits and most of those professional models are even very expensive (Vaisala, etc.). Pictures by Kaisa, thanks! Magic mirror Manufacture mirror that shows some live information, like weather forecast or room temperature. Technically it is computers screen which is covered by mirror glass than can be seen through - semi-transparent mirror. Computer drives the screen behind the mirror and does all the needed logic. Possible sensor used is for example motion sensor which turns on screen when motion is detected. Pictures by Kaisa, thanks! Vehicle speed monitor Display that shows speed of the approaching car or some other object. Use Doppler radar as sensing speed of vehicle and display it on the screen and/or feed data electronically to some other systems. It is similar solutions than existing ones you can see on some places to warn if you are driving over the limits. Needs suitable doppler radar module and possible display and some logic.","title":"1. Principles and practices"},{"location":"assignments/week01/#1-principles-and-practices","text":"","title":"1. Principles and practices"},{"location":"assignments/week01/#too-many-interesting-projects-on-my-mind","text":"...I would say weather station is most interesting, but also it is very challenging if amount of used sensors are very many. However, you can start with simple one first and add more later. Here comes short specs for each of those.","title":"Too many interesting projects on my mind..."},{"location":"assignments/week01/#outdoor-weather-station","text":"Design and manufacture feature rich outdoor weather station. More sensors the better. Operating power could be taken from solar panels or wind turbine if electricity is not available. Communication by some wireless method, WiFi, LoRa, etc. Temperature Humidity Atmospheric pressure Wind speed Rainfall Seismometer Fog meter A lot of commercial solutions exits and most of those professional models are even very expensive (Vaisala, etc.). Pictures by Kaisa, thanks!","title":"Outdoor weather station"},{"location":"assignments/week01/#magic-mirror","text":"Manufacture mirror that shows some live information, like weather forecast or room temperature. Technically it is computers screen which is covered by mirror glass than can be seen through - semi-transparent mirror. Computer drives the screen behind the mirror and does all the needed logic. Possible sensor used is for example motion sensor which turns on screen when motion is detected. Pictures by Kaisa, thanks!","title":"Magic mirror"},{"location":"assignments/week01/#vehicle-speed-monitor","text":"Display that shows speed of the approaching car or some other object. Use Doppler radar as sensing speed of vehicle and display it on the screen and/or feed data electronically to some other systems. It is similar solutions than existing ones you can see on some places to warn if you are driving over the limits. Needs suitable doppler radar module and possible display and some logic.","title":"Vehicle speed monitor"},{"location":"assignments/week02/","text":"2. Project management Setup tools I am using Fedora Linux workstation so many of needed tools were easily available from the distribution package management. Also I have used many of the needed tools earlier so those were already installed. Git sudo dnf install git Tool was already installed. I have used it a lot. Here is some basic commands I use most often: git status git log git show git diff git reset --hard git add <filename> git commit -s git push origin master Status shows general state of your current tree, like edited or new files. Log shows your commit history. Show shows last commit on your tree. Diff shows uncommitted changes what you have made your files. Reset --hard is handy when you have made changes to tree, but you need to discard those for some reason. Add adds file or directory you have edited to your commit you are going to do. Commit does the commit itself. Push uploads your local working tree to GitHub on my chase. GitHub https://github.com/ GitHub was already in use and configured. No need to to anything special. I decided to use it instead of GitLab due to that reason. For GitHub you need account. After that you need to add your public ssh key to GitHub in order to access using git-command. GitHub SSH keys Here is yet another documentation required by documentation how to add ssh keys to GitHub. On GitHub web user interface, go to your account settings. Settings => SSh and GPG keys. Push green button \"New SSH key\". Give some name you like to key, I used \"Home Workstation\". Then you need to find your personal PUBLIC key. Here is how it is found from Linux workstation - assuming you have already generated it. Copy & paste that ssh key (do not paste this unique key, it is my public key, you need your own) to GitHub as seen on picture below. cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5X7AWrmUrXkaqkgtyf7t4/j1miUFQu/j+BYfi/yiJswm2ampZE+eBI16EooCwK8z3l//M/DE98pY5ClMI8ulzqrStHdLXxFm4enLBr891/w0U+utejjKeenOGq8oJ0zQJLlVZ31JQwtdAO+hWyz+nz18TvmzQSs8dwA73nf9tGLkfbfTDxnoRio83NUHA3I0ReOH9ukK5EM4uM9HvCGDlObtm2atjnJAI63AS8ztEnEJGUhPFjTy1FX79yPSnClm2XfJeF4Lid4lb7jtpVmWtqQPnHH6kB0Qt+b5a+ZF2LXHGq47yoVTnnZhnUTdMyMLtCQ/rMlBpPil1/5vYizzUQ== crope@localhost.localdomain As you are going to add new login method / key to your existing GitHub account it will ask your password as confirmation. If everything went correctly added key should appear to list of ssh keys at your GitHub account. GitHub Pages https://github.com/ Used to host this WWW-site. It is easy to maintain that document just by pulling tree to GitHub using Git. Pages needed to be enabled from GitHub settings. Following settings are needed to GitHub Pages to point out location it loads that WWW-site. MkDocs sudo dnf install mkdocs-material First I thought I will maintain static HTML pages by hand. After I looked some videos, recommended MkDocs starts feeling more handy so I decided to give it a try. Also there was Material theme based existing template for the course. Installation was pretty straightforward from the package manager: sudo dnf install mkdocs-material . It will install both theme and documentation tool as a dependency. After that I manually copied course template files to my local working Git tree and tested it with command mkdocs serve . Worked, pretty simple. There was some challenges releasing that documentation on GitHub Pages. MkDocs documentation needs to be build in order to get site that can be released on GitHub Pages. It didn't feel very comfortable to commit machine build documentation to my working Git branch as it pollutes branch unintentionally without a reason. Fortunately there was a command mkdocs gh-deploy which makes new branch for documentation and publish it automatically. mkdocs serve mkdocs gh-deploy Serve launch local development site to your computer. gh-deploy builds site and uploads it to the GitHub Pages. Graph-Easy sudo dnf install perl-Graph-Easy Makes those simple diagrams used. echo \"[sensor 1], [sensor 2], [sensor N] -> [logic] <-> [radio] [power] -> [logic]\" | graph-easy --as_dot | dot -Tpng -o weather_station_graph.png Gives you graph:","title":"2. Project management"},{"location":"assignments/week02/#2-project-management","text":"","title":"2. Project management"},{"location":"assignments/week02/#setup-tools","text":"I am using Fedora Linux workstation so many of needed tools were easily available from the distribution package management. Also I have used many of the needed tools earlier so those were already installed.","title":"Setup tools"},{"location":"assignments/week02/#git","text":"sudo dnf install git Tool was already installed. I have used it a lot. Here is some basic commands I use most often: git status git log git show git diff git reset --hard git add <filename> git commit -s git push origin master Status shows general state of your current tree, like edited or new files. Log shows your commit history. Show shows last commit on your tree. Diff shows uncommitted changes what you have made your files. Reset --hard is handy when you have made changes to tree, but you need to discard those for some reason. Add adds file or directory you have edited to your commit you are going to do. Commit does the commit itself. Push uploads your local working tree to GitHub on my chase.","title":"Git"},{"location":"assignments/week02/#github","text":"https://github.com/ GitHub was already in use and configured. No need to to anything special. I decided to use it instead of GitLab due to that reason. For GitHub you need account. After that you need to add your public ssh key to GitHub in order to access using git-command.","title":"GitHub"},{"location":"assignments/week02/#github-ssh-keys","text":"Here is yet another documentation required by documentation how to add ssh keys to GitHub. On GitHub web user interface, go to your account settings. Settings => SSh and GPG keys. Push green button \"New SSH key\". Give some name you like to key, I used \"Home Workstation\". Then you need to find your personal PUBLIC key. Here is how it is found from Linux workstation - assuming you have already generated it. Copy & paste that ssh key (do not paste this unique key, it is my public key, you need your own) to GitHub as seen on picture below. cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5X7AWrmUrXkaqkgtyf7t4/j1miUFQu/j+BYfi/yiJswm2ampZE+eBI16EooCwK8z3l//M/DE98pY5ClMI8ulzqrStHdLXxFm4enLBr891/w0U+utejjKeenOGq8oJ0zQJLlVZ31JQwtdAO+hWyz+nz18TvmzQSs8dwA73nf9tGLkfbfTDxnoRio83NUHA3I0ReOH9ukK5EM4uM9HvCGDlObtm2atjnJAI63AS8ztEnEJGUhPFjTy1FX79yPSnClm2XfJeF4Lid4lb7jtpVmWtqQPnHH6kB0Qt+b5a+ZF2LXHGq47yoVTnnZhnUTdMyMLtCQ/rMlBpPil1/5vYizzUQ== crope@localhost.localdomain As you are going to add new login method / key to your existing GitHub account it will ask your password as confirmation. If everything went correctly added key should appear to list of ssh keys at your GitHub account.","title":"GitHub SSH keys"},{"location":"assignments/week02/#github-pages","text":"https://github.com/ Used to host this WWW-site. It is easy to maintain that document just by pulling tree to GitHub using Git. Pages needed to be enabled from GitHub settings. Following settings are needed to GitHub Pages to point out location it loads that WWW-site.","title":"GitHub Pages"},{"location":"assignments/week02/#mkdocs","text":"sudo dnf install mkdocs-material First I thought I will maintain static HTML pages by hand. After I looked some videos, recommended MkDocs starts feeling more handy so I decided to give it a try. Also there was Material theme based existing template for the course. Installation was pretty straightforward from the package manager: sudo dnf install mkdocs-material . It will install both theme and documentation tool as a dependency. After that I manually copied course template files to my local working Git tree and tested it with command mkdocs serve . Worked, pretty simple. There was some challenges releasing that documentation on GitHub Pages. MkDocs documentation needs to be build in order to get site that can be released on GitHub Pages. It didn't feel very comfortable to commit machine build documentation to my working Git branch as it pollutes branch unintentionally without a reason. Fortunately there was a command mkdocs gh-deploy which makes new branch for documentation and publish it automatically. mkdocs serve mkdocs gh-deploy Serve launch local development site to your computer. gh-deploy builds site and uploads it to the GitHub Pages.","title":"MkDocs"},{"location":"assignments/week02/#graph-easy","text":"sudo dnf install perl-Graph-Easy Makes those simple diagrams used. echo \"[sensor 1], [sensor 2], [sensor N] -> [logic] <-> [radio] [power] -> [logic]\" | graph-easy --as_dot | dot -Tpng -o weather_station_graph.png Gives you graph:","title":"Graph-Easy"},{"location":"assignments/week03/","text":"3. Computer Aided design This week task was to study and evaluate different design tools - raster, vector, 2D and 3D. My personal needs are mostly 3D design so I did more testing and evaluation on that side. Selected design tools are: GIMP, Inkscape and FreeCAD. GIMP Basic picture editing tool selected was simply GIMP (GNU Image Manipulation Program). I have used it earlier, it comes with Linux distribution used and it does the job. I think I don't even need it much during these courses. sudo dnf install gimp Inkscape Inkscape is a vector graphics editor I selected. It was natural choice as it was available from my OS package manager and it is rather feature rich. I am not sure how much I will need that kind of 2D vector graphic design tool still - probably for the laser cutter at least. As a test, I quickly draw simple half wave dipole antenna around 1000 MHz (not simulated not even calculated accurate, just a concept). I wonder if it is possible to laser cut that kind of small antennas from few millimeter thick aluminum plate... sudo dnf install inkscape dipole antenna.svg FreeCAD 3D design tool is one I likely need most. Here I evaluated Fusion 360 and FreeCAD. I had too much problems with Fusion 360. Firstly, Fusion 360 does not have Linux version and secondly that mess about user account. I tried it with Wine (Windows API implementation for Linux) but not very great results. It worked somehow, but feeling was a bit buggy. Also registration for Autodesk in order to get license was a bit tricky and you have to send some proofs (like picture of student id) in order to get education license. And for some reason it still started 30 days trial version of Fusion 360 even \"You\u2019re eligible for free one-year educational access to Autodesk products through the Autodesk Education Community.\". So I eventually switched to FreeCAD. My only earlier experience of 3D modeling I had was some experience modelling antennas using CST Studio. FreeCAD feels totally different which means learning curve will be rather heavy. After looking some tutorials from YouTube I was finally able to made simple design. It wasn't any part for my final project, but something useful still - it is cover plate for light switch. I need that as I have replaced manual light switches with smart ones that are controlled via home automation. 3D design made was build from 4 different blocks. All blocks were first drawn as 2D sketch and then converted to 3D model. First block was \"Pad\" which covers outlines of whole part. Then rest of three blocks were \"Pocket\" which are then removed from the Pad by boolean style operation. sudo dnf install freecad ABB Cover frame Jussi Impressivo.FCStd ABB Cover frame Jussi Impressivo.stl","title":"3. Computer Aided design"},{"location":"assignments/week03/#3-computer-aided-design","text":"This week task was to study and evaluate different design tools - raster, vector, 2D and 3D. My personal needs are mostly 3D design so I did more testing and evaluation on that side. Selected design tools are: GIMP, Inkscape and FreeCAD.","title":"3. Computer Aided design"},{"location":"assignments/week03/#gimp","text":"Basic picture editing tool selected was simply GIMP (GNU Image Manipulation Program). I have used it earlier, it comes with Linux distribution used and it does the job. I think I don't even need it much during these courses. sudo dnf install gimp","title":"GIMP"},{"location":"assignments/week03/#inkscape","text":"Inkscape is a vector graphics editor I selected. It was natural choice as it was available from my OS package manager and it is rather feature rich. I am not sure how much I will need that kind of 2D vector graphic design tool still - probably for the laser cutter at least. As a test, I quickly draw simple half wave dipole antenna around 1000 MHz (not simulated not even calculated accurate, just a concept). I wonder if it is possible to laser cut that kind of small antennas from few millimeter thick aluminum plate... sudo dnf install inkscape dipole antenna.svg","title":"Inkscape"},{"location":"assignments/week03/#freecad","text":"3D design tool is one I likely need most. Here I evaluated Fusion 360 and FreeCAD. I had too much problems with Fusion 360. Firstly, Fusion 360 does not have Linux version and secondly that mess about user account. I tried it with Wine (Windows API implementation for Linux) but not very great results. It worked somehow, but feeling was a bit buggy. Also registration for Autodesk in order to get license was a bit tricky and you have to send some proofs (like picture of student id) in order to get education license. And for some reason it still started 30 days trial version of Fusion 360 even \"You\u2019re eligible for free one-year educational access to Autodesk products through the Autodesk Education Community.\". So I eventually switched to FreeCAD. My only earlier experience of 3D modeling I had was some experience modelling antennas using CST Studio. FreeCAD feels totally different which means learning curve will be rather heavy. After looking some tutorials from YouTube I was finally able to made simple design. It wasn't any part for my final project, but something useful still - it is cover plate for light switch. I need that as I have replaced manual light switches with smart ones that are controlled via home automation. 3D design made was build from 4 different blocks. All blocks were first drawn as 2D sketch and then converted to 3D model. First block was \"Pad\" which covers outlines of whole part. Then rest of three blocks were \"Pocket\" which are then removed from the Pad by boolean style operation. sudo dnf install freecad ABB Cover frame Jussi Impressivo.FCStd ABB Cover frame Jussi Impressivo.stl","title":"FreeCAD"},{"location":"assignments/week04/","text":"4. Computer controlled cutting Weekly task This week went training with vinyl cutter and laser cutter and related design software. We started studying vinyl cutter basics and after that did the same with laser cutter. Most of the time went still learning laser cutting as that process is more complex starting from the 3D-modelling process. Vinyl cutting Vinyl cutter is a printer look-a-like machine that has a small knife in order to cut rather thin and soft material. Typically that material is just vinyl tape which is cut to some stickers. Used vinyl cutter was Roland CAMM-1 GS-24 and it is controlled by Windows workstation. Roland CAMM-1 GS-24 vinyl cutter Usually cutter is connected to computer like a printer using printer driver made for the device. So instead of printing, it will cut. Printed document needs to be converted into vector format. Line width didn't seem to have any requirement at our test, it just cuts where the line of the center line was. Anyhow, printer driver API is for printers and does not fit 100% well with other use cases like that, so be warned there may be device vendor specific tricks which are varying from manufacturer to other and so. Sticker As a vinyl cutting exercise I made some Pokemon Go Team Valor logo stickers. I downloaded suitable existing logo which was a red colored raster image on transparent background in .png format. Then I used Inkscape Trace Bitmap tool to the logo in order to get vector image with borders. Vector image was then cut by using vinyl cutter. Here is the original image of the used Valor logo Valor stickers Valor sticker installation I made on workroom door \"Edge detection\" method ended up with unwanted results because it made double line borders. I think it could be caused by the smooth borders of the original photo. First I removed those duplicate lines manually, which was pretty much work. I eventually decided to test other trace algorithms as Inkscape supports very many of them - 5 for single scan and 4 for multiple scans. I found that \"Edge detection\" and \"Autotrace\" methods make pretty good looking traces for my logo image. I used default parameters for both of those tracing algorithms and finally vinyl cut few pieces of logos for each used tracing algorithm. There was not big difference in the result between both algorithms. Cutter; Turn power on Cutter; Open vinyl load lever, located back left Cutter; Insert large enough piece of vinyl Cutter; Close vinyl load lever, located back left Cutter; Set left and right rollers. Those need to be on white markings. Roller locations are used to detect the width of the cut area. Cutter; Select \"PIECE\" from \"SELECT SHEET\" cutter menu. There is some other material options available too like \"ROLL\", but for small cutting \"PIECE\" is enough. Piece means small piece of material, cutter measures height automatically and width is taken automatically from roller locations. Inkscape; Open your vector design file Inkscape; Open \"Extensions -> Roland CutStudio\". This extension is installed on our fab lab workstation. It opens CutStudio with your design from Inkscape. CutStudio; File -> Cutting Setup... Get sheet size from the cutter \"Get From machine\". It should show same size you can see on vinyl cutter screen CutStudio; Scale your drawing to fit vinyl sheet size and set drawing position on sheet. Also you could for example clone it or do other tricks needed before cutting. CutStudio; File -> Cutting... in order to physical cut operation. After cutting is finished vinyl can be removed from the cutter. Firstly it is better to move cutting head to parking position from the cutter setting in order to get more room to work. Then release load lever and remove vinyl. It should then manually remove those unneeded parts from the vinyl and for that job you may need scissors, needle or tweezers, especially if cutting contains very small vinyl parts. After all the unneeded parts are removed you need to add adhesive transfer sheet in order to place vinyl sticker to final position. Select sheet type Sheet size detected by the cutter with PIECE setting Get sheet size from cutter Inkscape launch CutStudio Roland CutStudio Peeling vinyl tape Laser cutting Kerf Kerf is term for \"extra\" material removed by the cutting process itself. On ideal case cutting process does nothing but cuts your material as desired, but in real life there is very often mechanical or some other process that removes material. That is for example saw blade or laser beam. So if your saw blade is 1mm wide it will remove that much material and it is said that 1mm kerf is removed. Same applies for laser beam too as it burns material during cutting process. Kerf should be taken into account when that small amounts of extra removed material is essential. Kerf test for Acrylic 3mm I ran test for 3mm Acrylic plate. I got two different results depending how I ordered those 10 small pieces. Laser beam cut/kerf is not constant - it is wider on top side and a little bit smaller on bottom side. Larger calculated kerf is gotten when every other piece is upside-down and it is about double the size of compared to another. Larger kerf value, 0.136mm, seems to be more realistic in real life in that case. >> (100-99.45)/10 ans = 0.055000 >> (100-98.64)/10 ans = 0.13600 Kerf 0.055mm Kerf 0.136mm Focus test Some tests were made how focus effects to cutting. +/-2mm and +/-4mm offsets were tested to plywood. Laser is usually calibrated so that most of the power is on focus. Due to that, the more the material is off from the focus the less the power it gets. 4mm offset with used settings caused it does not cut through anymore on one test. Focus test Power, frequency, speed tests Then we tested how different laser parameters effects to cut and engrave. All these 3 parameters have some relation to operation result. If you for example decrease power you can/should also decrease speed in order to succeed the same thickness in the material cut. Test plate shows how increased speed eventually fails cut. On test plate you can see the same happens for decreased power too. Power, frequency, speed tests DPI test Laser DPI test was made for 150, 300 and 600 DPI resolutions. Result is that 150DPI burns less material and 600DPI the most, which is expected. It is because bigger the resolution the more there is overlapping burned points by laser beam. As we calculated Kerf, for 3mm vinyl, upper side, it was 0.136mm. So lets assume that this is beam width and it is same for MDF (~rough estimate). DPI is shorthand for Dots Per Inch. Inch is 2.54cm => 25.4mm. >> 2.54*10/0.136 ans = 186.76 >> 600/186.76 ans = 3.2127 So calculating maximum DPI from that kerf value we got 186.76 DPI. And in all points after that gets lasered multiple times / overlapping and due to that burns more material. 600DPI means every single point is burned roughly 3.2 times (hope calculations about are correct). DPI test 3D model of simple block I used FreeCAD to design simple brick having 4 joints, one for each side. I saw this kind of pieces on lab so I decided to go where it was easiest. First I made 2D sketch on FreeCAD. Then I drew outline of part using polyline tool on sketcher [toolbar or Sketch -> Sketcher geometries -> Create polyline]. After that I added constraint for horizontal and vertical lines and then symmetry around center point of XY-plane. Then I added equal length constraint of all similar length lines. And finally parametrized that slot width. FreeCAD Sketcher Spreadsheet is created for the kerf and material thickness parameters. It may be a bit overkill for this small design but parametric design principles were required so here it is in all flavors. Technically, that FreeCAD spreadsheet contains formula slotwidth = thickness - kerf, which can be seen on picture. Parameter 'slotwidth' from spreadsheet is used on sketch to define slot width for one slot. Other 3 slots on the sketch are set same size as constraint so same value propagates that way to all slots on design. FreeCAD Spreadsheet FreeCAD parametric design It was somehow difficult to export sketch or 3D model outlines as vector format needed for laser cutter. On ideal case you just need to save/export it in some format and that's all - but it is far from that. The way I did it was that I made FreeCAD TehcnicalDrawing from part and exported it as a .svg (small button on bar, hardly visible on attached picture). After that you can edit it on Inkscape, change line width to 0.02mm required by laser (if line width is too large laser refuses and does error beep). From Inkscape save drawing as a .pdf and use laser printer workstation to print it. I still wonder if there could be a better tool chain to do all these tasks a bit more automatically. FreeCAD TechDraw FreeCAD 3D model Download design: block.FCStd block.stl block.pdf Laser cutting Laser used was Epilog Fusion M2 40. 3D model from FreeCAD was imported to laser using following steps: Design workstation; Export FreeCAD Technical Drawing to vector format .svg Design workstation; Import .svg to Inkscape Design workstation; Edit line width to 0.02mm and check outlines Design workstation; Save as .pdf Laser cutter; turn on (air intake on, air outlet on, laser power on) Laser workstation; Open .pdf Laser workstation; Select printer and edit printer (laser) settings Laser workstation; Load correct laser settings per material used (you should not need to define your own settings as there is existing settings for most common materials) Laser workstation; Send printer work to laser Laser cutter; JOG. Interface for positioning laser head to given point, for example setting starting point for your laser cut (top-left corner). There is red laser pointer showing exact point, use joystick to adjust. Laser cutter; FOCUS. Interface for moving laser cutter bed up and down. Used for adjusting distance between laser beam and material, there is mechanical triangle tool on laser for setting correct distance. Laser cutter; JOB. That's is printing document queue received by the laser machine. Select your job - it is likely the last one. Laser cutter; GO. Start cutting. Laser cutter; Wait 1 minute or so after laser is finished before opening the lid. That's in order to get all burning products like dangerous smoke to get removed from the machine. Unfortunately there is very many things you can do wrong. One must be very careful with safety issues when working with laser cutter. Always do the basic checks mentioned on many places near laser (air intake, air outlet) and check the material compatibility. Check where the fire blanket is and make a plan in your head what you would do if it starts burning before you start cutting. Laser cut blocks in random configuration. If something useful is needed then these blocks can be reconfigured as a kettle base :-) Set of Blocks... Design files Valor logo autotrace.svg Valor logo brightness_cutoff.svg block.FCStd block.stl block.pdf Summary TOO MUCH WORK. This week was terrible amount of things. Something should be reduced. I would reduce the documentation and focus more on learning.","title":"4. Computer controlled cutting"},{"location":"assignments/week04/#4-computer-controlled-cutting","text":"","title":"4. Computer controlled cutting"},{"location":"assignments/week04/#weekly-task","text":"This week went training with vinyl cutter and laser cutter and related design software. We started studying vinyl cutter basics and after that did the same with laser cutter. Most of the time went still learning laser cutting as that process is more complex starting from the 3D-modelling process.","title":"Weekly task"},{"location":"assignments/week04/#vinyl-cutting","text":"Vinyl cutter is a printer look-a-like machine that has a small knife in order to cut rather thin and soft material. Typically that material is just vinyl tape which is cut to some stickers. Used vinyl cutter was Roland CAMM-1 GS-24 and it is controlled by Windows workstation. Roland CAMM-1 GS-24 vinyl cutter Usually cutter is connected to computer like a printer using printer driver made for the device. So instead of printing, it will cut. Printed document needs to be converted into vector format. Line width didn't seem to have any requirement at our test, it just cuts where the line of the center line was. Anyhow, printer driver API is for printers and does not fit 100% well with other use cases like that, so be warned there may be device vendor specific tricks which are varying from manufacturer to other and so.","title":"Vinyl cutting"},{"location":"assignments/week04/#sticker","text":"As a vinyl cutting exercise I made some Pokemon Go Team Valor logo stickers. I downloaded suitable existing logo which was a red colored raster image on transparent background in .png format. Then I used Inkscape Trace Bitmap tool to the logo in order to get vector image with borders. Vector image was then cut by using vinyl cutter. Here is the original image of the used Valor logo Valor stickers Valor sticker installation I made on workroom door \"Edge detection\" method ended up with unwanted results because it made double line borders. I think it could be caused by the smooth borders of the original photo. First I removed those duplicate lines manually, which was pretty much work. I eventually decided to test other trace algorithms as Inkscape supports very many of them - 5 for single scan and 4 for multiple scans. I found that \"Edge detection\" and \"Autotrace\" methods make pretty good looking traces for my logo image. I used default parameters for both of those tracing algorithms and finally vinyl cut few pieces of logos for each used tracing algorithm. There was not big difference in the result between both algorithms. Cutter; Turn power on Cutter; Open vinyl load lever, located back left Cutter; Insert large enough piece of vinyl Cutter; Close vinyl load lever, located back left Cutter; Set left and right rollers. Those need to be on white markings. Roller locations are used to detect the width of the cut area. Cutter; Select \"PIECE\" from \"SELECT SHEET\" cutter menu. There is some other material options available too like \"ROLL\", but for small cutting \"PIECE\" is enough. Piece means small piece of material, cutter measures height automatically and width is taken automatically from roller locations. Inkscape; Open your vector design file Inkscape; Open \"Extensions -> Roland CutStudio\". This extension is installed on our fab lab workstation. It opens CutStudio with your design from Inkscape. CutStudio; File -> Cutting Setup... Get sheet size from the cutter \"Get From machine\". It should show same size you can see on vinyl cutter screen CutStudio; Scale your drawing to fit vinyl sheet size and set drawing position on sheet. Also you could for example clone it or do other tricks needed before cutting. CutStudio; File -> Cutting... in order to physical cut operation. After cutting is finished vinyl can be removed from the cutter. Firstly it is better to move cutting head to parking position from the cutter setting in order to get more room to work. Then release load lever and remove vinyl. It should then manually remove those unneeded parts from the vinyl and for that job you may need scissors, needle or tweezers, especially if cutting contains very small vinyl parts. After all the unneeded parts are removed you need to add adhesive transfer sheet in order to place vinyl sticker to final position. Select sheet type Sheet size detected by the cutter with PIECE setting Get sheet size from cutter Inkscape launch CutStudio Roland CutStudio Peeling vinyl tape","title":"Sticker"},{"location":"assignments/week04/#laser-cutting","text":"","title":"Laser cutting"},{"location":"assignments/week04/#kerf","text":"Kerf is term for \"extra\" material removed by the cutting process itself. On ideal case cutting process does nothing but cuts your material as desired, but in real life there is very often mechanical or some other process that removes material. That is for example saw blade or laser beam. So if your saw blade is 1mm wide it will remove that much material and it is said that 1mm kerf is removed. Same applies for laser beam too as it burns material during cutting process. Kerf should be taken into account when that small amounts of extra removed material is essential.","title":"Kerf"},{"location":"assignments/week04/#kerf-test-for-acrylic-3mm","text":"I ran test for 3mm Acrylic plate. I got two different results depending how I ordered those 10 small pieces. Laser beam cut/kerf is not constant - it is wider on top side and a little bit smaller on bottom side. Larger calculated kerf is gotten when every other piece is upside-down and it is about double the size of compared to another. Larger kerf value, 0.136mm, seems to be more realistic in real life in that case. >> (100-99.45)/10 ans = 0.055000 >> (100-98.64)/10 ans = 0.13600 Kerf 0.055mm Kerf 0.136mm","title":"Kerf test for Acrylic 3mm"},{"location":"assignments/week04/#focus-test","text":"Some tests were made how focus effects to cutting. +/-2mm and +/-4mm offsets were tested to plywood. Laser is usually calibrated so that most of the power is on focus. Due to that, the more the material is off from the focus the less the power it gets. 4mm offset with used settings caused it does not cut through anymore on one test. Focus test","title":"Focus test"},{"location":"assignments/week04/#power-frequency-speed-tests","text":"Then we tested how different laser parameters effects to cut and engrave. All these 3 parameters have some relation to operation result. If you for example decrease power you can/should also decrease speed in order to succeed the same thickness in the material cut. Test plate shows how increased speed eventually fails cut. On test plate you can see the same happens for decreased power too. Power, frequency, speed tests","title":"Power, frequency, speed tests"},{"location":"assignments/week04/#dpi-test","text":"Laser DPI test was made for 150, 300 and 600 DPI resolutions. Result is that 150DPI burns less material and 600DPI the most, which is expected. It is because bigger the resolution the more there is overlapping burned points by laser beam. As we calculated Kerf, for 3mm vinyl, upper side, it was 0.136mm. So lets assume that this is beam width and it is same for MDF (~rough estimate). DPI is shorthand for Dots Per Inch. Inch is 2.54cm => 25.4mm. >> 2.54*10/0.136 ans = 186.76 >> 600/186.76 ans = 3.2127 So calculating maximum DPI from that kerf value we got 186.76 DPI. And in all points after that gets lasered multiple times / overlapping and due to that burns more material. 600DPI means every single point is burned roughly 3.2 times (hope calculations about are correct). DPI test","title":"DPI test"},{"location":"assignments/week04/#3d-model-of-simple-block","text":"I used FreeCAD to design simple brick having 4 joints, one for each side. I saw this kind of pieces on lab so I decided to go where it was easiest. First I made 2D sketch on FreeCAD. Then I drew outline of part using polyline tool on sketcher [toolbar or Sketch -> Sketcher geometries -> Create polyline]. After that I added constraint for horizontal and vertical lines and then symmetry around center point of XY-plane. Then I added equal length constraint of all similar length lines. And finally parametrized that slot width. FreeCAD Sketcher Spreadsheet is created for the kerf and material thickness parameters. It may be a bit overkill for this small design but parametric design principles were required so here it is in all flavors. Technically, that FreeCAD spreadsheet contains formula slotwidth = thickness - kerf, which can be seen on picture. Parameter 'slotwidth' from spreadsheet is used on sketch to define slot width for one slot. Other 3 slots on the sketch are set same size as constraint so same value propagates that way to all slots on design. FreeCAD Spreadsheet FreeCAD parametric design It was somehow difficult to export sketch or 3D model outlines as vector format needed for laser cutter. On ideal case you just need to save/export it in some format and that's all - but it is far from that. The way I did it was that I made FreeCAD TehcnicalDrawing from part and exported it as a .svg (small button on bar, hardly visible on attached picture). After that you can edit it on Inkscape, change line width to 0.02mm required by laser (if line width is too large laser refuses and does error beep). From Inkscape save drawing as a .pdf and use laser printer workstation to print it. I still wonder if there could be a better tool chain to do all these tasks a bit more automatically. FreeCAD TechDraw FreeCAD 3D model","title":"3D model of simple block"},{"location":"assignments/week04/#download-design","text":"block.FCStd block.stl block.pdf","title":"Download design:"},{"location":"assignments/week04/#laser-cutting_1","text":"Laser used was Epilog Fusion M2 40. 3D model from FreeCAD was imported to laser using following steps: Design workstation; Export FreeCAD Technical Drawing to vector format .svg Design workstation; Import .svg to Inkscape Design workstation; Edit line width to 0.02mm and check outlines Design workstation; Save as .pdf Laser cutter; turn on (air intake on, air outlet on, laser power on) Laser workstation; Open .pdf Laser workstation; Select printer and edit printer (laser) settings Laser workstation; Load correct laser settings per material used (you should not need to define your own settings as there is existing settings for most common materials) Laser workstation; Send printer work to laser Laser cutter; JOG. Interface for positioning laser head to given point, for example setting starting point for your laser cut (top-left corner). There is red laser pointer showing exact point, use joystick to adjust. Laser cutter; FOCUS. Interface for moving laser cutter bed up and down. Used for adjusting distance between laser beam and material, there is mechanical triangle tool on laser for setting correct distance. Laser cutter; JOB. That's is printing document queue received by the laser machine. Select your job - it is likely the last one. Laser cutter; GO. Start cutting. Laser cutter; Wait 1 minute or so after laser is finished before opening the lid. That's in order to get all burning products like dangerous smoke to get removed from the machine. Unfortunately there is very many things you can do wrong. One must be very careful with safety issues when working with laser cutter. Always do the basic checks mentioned on many places near laser (air intake, air outlet) and check the material compatibility. Check where the fire blanket is and make a plan in your head what you would do if it starts burning before you start cutting. Laser cut blocks in random configuration. If something useful is needed then these blocks can be reconfigured as a kettle base :-) Set of Blocks...","title":"Laser cutting"},{"location":"assignments/week04/#design-files","text":"Valor logo autotrace.svg Valor logo brightness_cutoff.svg block.FCStd block.stl block.pdf","title":"Design files"},{"location":"assignments/week04/#summary","text":"TOO MUCH WORK. This week was terrible amount of things. Something should be reduced. I would reduce the documentation and focus more on learning.","title":"Summary"},{"location":"assignments/week05/","text":"5. Invention, intellectual property and income Dissemination plan My final project plan is currently outdoor weather station with great amount of sensors. There has been that kind of weather stations for ages, which means basic concept is nothing new nor novel. I think most innovations on that field has been long time only on sensor technology. Developing new type of sensors is sure out of scope at this course in every dimension - it is almost always a lot of signal processing and mathematics. My plan is just make robust weather station, for extreme Finnish winter conditions down to -55 Celsius degrees, that can be extended later using existing sensors. Whole project is just a hobby project without any commercial interest. Anyhow, it could be interesting if it can be made such simple, feature rich, modular, extendable and pretty cheap \"reference\" package which other hobbyists can use and develop further. Project will be very likely hosted on GitHub. GitHub offers both version control and www-pages on same integrated platform and it is biggest site for that kind of open source projects having very large user space. Licenses I think, as a hobby project without any commercial interest, it is better to license it as open as possible with less restriction to encourage people to play with it and develop further. Looking those Creative Commons licenses I eventually ended up to most open and permissive CC0 license. Another very suitable license could be CC BY 4.0. CC0 license is selected for all the other things except software. For software there is multiple suitable popular open source licenses; GNU GPL, Apache, MIT, etc. All those are pretty similar and fits well project like that. I decided to choose MIT License. Licenses are: CC0 and MIT. Slide presentation.png Video At this point of Fab Lab courses I really don't have basically any material manufacturing the final project. Due to that video is just a place holder at the moment. presentation.mp4","title":"5. Invention, intellectual property and income"},{"location":"assignments/week05/#5-invention-intellectual-property-and-income","text":"","title":"5. Invention, intellectual property and income"},{"location":"assignments/week05/#dissemination-plan","text":"My final project plan is currently outdoor weather station with great amount of sensors. There has been that kind of weather stations for ages, which means basic concept is nothing new nor novel. I think most innovations on that field has been long time only on sensor technology. Developing new type of sensors is sure out of scope at this course in every dimension - it is almost always a lot of signal processing and mathematics. My plan is just make robust weather station, for extreme Finnish winter conditions down to -55 Celsius degrees, that can be extended later using existing sensors. Whole project is just a hobby project without any commercial interest. Anyhow, it could be interesting if it can be made such simple, feature rich, modular, extendable and pretty cheap \"reference\" package which other hobbyists can use and develop further. Project will be very likely hosted on GitHub. GitHub offers both version control and www-pages on same integrated platform and it is biggest site for that kind of open source projects having very large user space.","title":"Dissemination plan"},{"location":"assignments/week05/#licenses","text":"I think, as a hobby project without any commercial interest, it is better to license it as open as possible with less restriction to encourage people to play with it and develop further. Looking those Creative Commons licenses I eventually ended up to most open and permissive CC0 license. Another very suitable license could be CC BY 4.0. CC0 license is selected for all the other things except software. For software there is multiple suitable popular open source licenses; GNU GPL, Apache, MIT, etc. All those are pretty similar and fits well project like that. I decided to choose MIT License. Licenses are: CC0 and MIT.","title":"Licenses"},{"location":"assignments/week05/#slide","text":"presentation.png","title":"Slide"},{"location":"assignments/week05/#video","text":"At this point of Fab Lab courses I really don't have basically any material manufacturing the final project. Due to that video is just a place holder at the moment. presentation.mp4","title":"Video"},{"location":"assignments/week06/","text":"5. Electronics production This week I worked on defining my final project idea and started to getting used to the documentation process. Group assignment: characterize the design rules for your PCB production process https://mods.cba.mit.edu/ traces interior 1/64\" 0.010\" fiber laser PCB production with Roland MonoFab SRM-20 milling machine Roland MonoFab SRM-20 is rather small desktop CNC milling machine. It is general purpose milling machine which means it is not the best one for the special purposes like PCB milling though. Anyhow, it could do rather nice PCB milling on cases where PCB size is not very large, single side PCB is enough and traces needed are relatively large. It is also quite slow compared to milling machines that are made just for the PCB milling. On the lab I did that \"linetest\" using Roland MonoFab SRM-20. Toolpath traces were generated with \"Mods\" tool https://mods.cba.mit.edu/ Empty workbench. https://mods.cba.mit.edu/ Select \"programs\" Select \"open server program\" Select \"machines->Roland->mill->SRM-20->PCB png\" Milling design tool main view Select \"select png file\" \"linetest.png\" file selected from computer Set tool diameter to 0.25 Change milling machine origin to 0/0/0 Select \"delete\" Delete \"WebSocket device\" module because we don't have network connection on our milling machine. We create \"save file\" module as a replacement. Select \"modules\" Select \"open server module\" Select \"file->save\" Add connection between modules. Red line is new connection. Select \"calculate\" Save Roland SRM-20 toolpath file for traces Select \"select png file\" \"linetest.interior.png\" file selected from computer select \"mill outline (1/32)\" Set tool diameter to 1 Select \"calculate\" Save Roland SRM-20 toolpath file for outline Generated toolpath for traces (linetest.png) Generated toolpath for outline (linetest.interior.png) Fab Academy linetest.png used on that exercise Fab Academy linetest.interior.png used on that exercise fig 6 modules you generally need to touch when using Mods \"read png\" Basic input file operations, self explaining? \"set PCB defaults\" This module is just for select suitable default values for \"mill raster 2D\" module. Two choices, one for traces and one for outlines. \"mill raster 2D\" That is most important module. Default settings are pretty good, change if needed. Our lab has for example smaller drill for traces than default and larger drill for outlines than default. Change accordingly. Our PCB was FR-1 which is something like 1.6mm substrate and 0.035mm copper or so. Default values fit very well for those PCB thickness no need to adjust even slightly off. Our lab re-uses LPKF ProtoMat PCB machine milling bits for SRM-20 PCB milling. Especially tracing drill is different as it is V-shaped 0.2mm-0.5mm drill. For more depth you cut the more wide trace will be. I used 0.25mm value for that bit with all the other settings default, which produces very nice cut. Offset number setting means how many rounds drill is run in parallel, bigger the number the larger area is skinned from the the copper. Different values can be tested and result seen from \"view toolpath\" module. You may compensate smaller drill by adding more offset, but V-shaped drill bits are not aimed for that so better to remove extra copper from more suitable drill bit. \"Roland SRM-20 milling machine\" Module for positioning. origin should be zeroed as we set origin from machine in order to avoid \"double\" origin. Those defaults are for situation SRM-20 is connected and controlled directly by that module, but on out case toolpath is transferred on file. \"jog height\" is value how much drill is moved top of Z-origin when transferred (not cut) to different position. Default 2mm is OK, I would say do not decrease. \"home\" is position where head is moved after the job is finished. \"save file\" Saves our toolpath to file. \"view toolpath\" module Open and see how your calculated toolpath looks. Research https://gitlab.fabcloud.org/pub/programmers/programmer-swd-d11c Testing UPDI programmer For testing build UPDI programmer I need some device to flash. For that I loaned hello.t412.echo board from lab. I already had https://gitlab.fabcloud.org/pub/programmers/programmer-updi-d11c Testing UPDI programmer For testing build UPDI programmer I need some device to flash. For that I loaned hello.t412.echo board from lab. I already had Arduino installed on my workstation as I earlier did some esp8266 projects, so I needed only install ATtiny412 specific development files to Arduino. hello.t412.echo board is tiny PCB having ATtiny412 chip with two communication interfaces: UPDI for programming the chip UART for serial receive and transmit Board had initially some slightly tweaked software, it output was Finnish language. I replaced it with \"standard\" one. Microchip ATtiny412 support for Arduino I added megaTinyCore using Arduino Boards Manager as descripted in installation instructions: https://github.com/SpenceKonde/megaTinyCore/blob/master/Installation.md Add additional board manager: \"File->Preferences\" \"Additional Boards Manager URLS:\" (http://drazzy.com/package_drazzy.com_index.json) Then open Boards Manager and install megaTinyCore: \"Tools->Board->Boards Manager\" install \"megaTinyCore\" After that Arduino should have support for ATtiny412 and many other chips from that family. Compiling hello.t412.echo.ino test program I downloaded hello.t412.echo.ino and opened it to Arduino. http://academy.cba.mit.edu/classes/embedded_programming/t412/hello.t412.echo.ino Select correct environment for that ATtiny412 chip. \"Tools->Board->megaTinyCore->ATtiny412/402/212/202\" \"Tools->Chip->ATtiny412\" \"Sketch->Compile/Verify\" Sketch uses 1918 bytes (46%) of program storage space. Maximum is 4096 bytes. Global variables use 91 bytes (35%) of dynamic memory, leaving 165 bytes for local variables. Maximum is 256 bytes. It compiled correctly. Transfer hello.t412.echo program to chip Connect UPDI, Vcc and GND wires between programmer and device carefully and correctly. Plug UPDI programmer to computer. On my case, Linux, it appears as /dev/ttyACM0 serial device. UPDI programmer pinout: https://gitlab.fabcloud.org/pub/programmers/programmer-updi-d11c hello.t412.echo pinout: http://academy.cba.mit.edu/classes/embedded_programming/t412/hello.t412.echo.png \"Tools->Port\" (/dev/ttyACM0) \"Tools->Programmer->SerialUPDI - SLOW: 57600 baud, any platform, any voltage, any adapter.\" \"Sketch->Upload\" SerialUPDI UPDI programming for Arduino using a serial adapter Based on pymcuprog, with significant modifications By Quentin Bolsee and Spence Konde Version 1.2.3 - Jan 2022 Using serial port /dev/ttyACM0 at 57600 baud. Target: attiny412 Set fuses: ['2:0x02', '6:0x04', '8:0x00'] Action: write File: /tmp/arduino_build_547357/hello.t412.echo.ino.hex Pinging device... Ping response: 1E9223 Setting fuse 0x2=0x2 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x6=0x4 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x8=0x0 Writing literal values... Verifying literal values... Action took 0.02s Finished writing fuses. Chip/Bulk erase, Memory type eeprom is conditionally erased (depending upon EESAVE fuse setting) Memory type flash is always erased Memory type lockbits is always erased ... Erased. Action took 0.01s Writing from hex file... Writing flash... [==================================================] 30/30 Action took 0.65s Verifying... [==================================================] 4/4 Verify successful. Data in flash matches data in specified hex-file Action took 0.42s Chip firmware is uploaded successfully, which is is enough to confirm our UPDI programmer works correctly. Test hello.t412.echo board I think this is out of scope of that week, but here it is briefly. I used USB UART board to test hello.t412.echo board. Connect TX<->RX and RX<->TX lines between USB UART and hello.t412.echo board. Also connect 5V Vcc and GND from USB UART to hello.t412.echo board. Disable hw flow control from USB UART (not sure if it is needed, I didn't test). Plug USB cable to computer and open terminal with following settings and test to type some letters. [crope@localhost hello.t412.echo]$ python -m serial.tools.miniterm /dev/ttyUSB0 115200 --- Miniterm on /dev/ttyUSB0 115200,8,N,1 --- --- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H --- hello.t412.echo: you typed \"H\" hello.t412.echo: you typed \"He\" hello.t412.echo: you typed \"Hel\" hello.t412.echo: you typed \"Hell\" hello.t412.echo: you typed \"Hello\" hello.t412.echo: you typed \"Hello \" hello.t412.echo: you typed \"Hello F\" hello.t412.echo: you typed \"Hello Fa\" hello.t412.echo: you typed \"Hello Fab\" hello.t412.echo: you typed \"Hello Fab \" hello.t412.echo: you typed \"Hello Fab L\" hello.t412.echo: you typed \"Hello Fab La\" hello.t412.echo: you typed \"Hello Fab Lab\" hello.t412.echo: you typed \"Hello Fab Lab \" hello.t412.echo: you typed \"Hello Fab Lab O\" hello.t412.echo: you typed \"Hello Fab Lab Ou\" hello.t412.echo: you typed \"Hello Fab Lab Oul\" hello.t412.echo: you typed \"Hello Fab Lab Oulu\" --- exit --- [crope@localhost hello.t412.echo]$","title":"5. Electronics production"},{"location":"assignments/week06/#5-electronics-production","text":"This week I worked on defining my final project idea and started to getting used to the documentation process. Group assignment: characterize the design rules for your PCB production process https://mods.cba.mit.edu/ traces interior 1/64\" 0.010\" fiber laser","title":"5. Electronics production"},{"location":"assignments/week06/#pcb-production-with-roland-monofab-srm-20-milling-machine","text":"Roland MonoFab SRM-20 is rather small desktop CNC milling machine. It is general purpose milling machine which means it is not the best one for the special purposes like PCB milling though. Anyhow, it could do rather nice PCB milling on cases where PCB size is not very large, single side PCB is enough and traces needed are relatively large. It is also quite slow compared to milling machines that are made just for the PCB milling. On the lab I did that \"linetest\" using Roland MonoFab SRM-20. Toolpath traces were generated with \"Mods\" tool https://mods.cba.mit.edu/ Empty workbench. https://mods.cba.mit.edu/ Select \"programs\" Select \"open server program\" Select \"machines->Roland->mill->SRM-20->PCB png\" Milling design tool main view Select \"select png file\" \"linetest.png\" file selected from computer Set tool diameter to 0.25 Change milling machine origin to 0/0/0 Select \"delete\" Delete \"WebSocket device\" module because we don't have network connection on our milling machine. We create \"save file\" module as a replacement. Select \"modules\" Select \"open server module\" Select \"file->save\" Add connection between modules. Red line is new connection. Select \"calculate\" Save Roland SRM-20 toolpath file for traces Select \"select png file\" \"linetest.interior.png\" file selected from computer select \"mill outline (1/32)\" Set tool diameter to 1 Select \"calculate\" Save Roland SRM-20 toolpath file for outline Generated toolpath for traces (linetest.png) Generated toolpath for outline (linetest.interior.png) Fab Academy linetest.png used on that exercise Fab Academy linetest.interior.png used on that exercise fig","title":"PCB production with Roland MonoFab SRM-20 milling machine"},{"location":"assignments/week06/#6-modules-you-generally-need-to-touch-when-using-mods","text":"","title":"6 modules you generally need to touch when using Mods"},{"location":"assignments/week06/#read-png","text":"Basic input file operations, self explaining?","title":"\"read png\""},{"location":"assignments/week06/#set-pcb-defaults","text":"This module is just for select suitable default values for \"mill raster 2D\" module. Two choices, one for traces and one for outlines.","title":"\"set PCB defaults\""},{"location":"assignments/week06/#mill-raster-2d","text":"That is most important module. Default settings are pretty good, change if needed. Our lab has for example smaller drill for traces than default and larger drill for outlines than default. Change accordingly. Our PCB was FR-1 which is something like 1.6mm substrate and 0.035mm copper or so. Default values fit very well for those PCB thickness no need to adjust even slightly off. Our lab re-uses LPKF ProtoMat PCB machine milling bits for SRM-20 PCB milling. Especially tracing drill is different as it is V-shaped 0.2mm-0.5mm drill. For more depth you cut the more wide trace will be. I used 0.25mm value for that bit with all the other settings default, which produces very nice cut. Offset number setting means how many rounds drill is run in parallel, bigger the number the larger area is skinned from the the copper. Different values can be tested and result seen from \"view toolpath\" module. You may compensate smaller drill by adding more offset, but V-shaped drill bits are not aimed for that so better to remove extra copper from more suitable drill bit.","title":"\"mill raster 2D\""},{"location":"assignments/week06/#roland-srm-20-milling-machine","text":"Module for positioning. origin should be zeroed as we set origin from machine in order to avoid \"double\" origin. Those defaults are for situation SRM-20 is connected and controlled directly by that module, but on out case toolpath is transferred on file. \"jog height\" is value how much drill is moved top of Z-origin when transferred (not cut) to different position. Default 2mm is OK, I would say do not decrease. \"home\" is position where head is moved after the job is finished.","title":"\"Roland SRM-20 milling machine\""},{"location":"assignments/week06/#save-file","text":"Saves our toolpath to file.","title":"\"save file\""},{"location":"assignments/week06/#view-toolpath-module","text":"Open and see how your calculated toolpath looks.","title":"\"view toolpath\" module"},{"location":"assignments/week06/#research","text":"https://gitlab.fabcloud.org/pub/programmers/programmer-swd-d11c","title":"Research"},{"location":"assignments/week06/#testing-updi-programmer","text":"For testing build UPDI programmer I need some device to flash. For that I loaned hello.t412.echo board from lab. I already had https://gitlab.fabcloud.org/pub/programmers/programmer-updi-d11c","title":"Testing UPDI programmer"},{"location":"assignments/week06/#testing-updi-programmer_1","text":"For testing build UPDI programmer I need some device to flash. For that I loaned hello.t412.echo board from lab. I already had Arduino installed on my workstation as I earlier did some esp8266 projects, so I needed only install ATtiny412 specific development files to Arduino. hello.t412.echo board is tiny PCB having ATtiny412 chip with two communication interfaces: UPDI for programming the chip UART for serial receive and transmit Board had initially some slightly tweaked software, it output was Finnish language. I replaced it with \"standard\" one.","title":"Testing UPDI programmer"},{"location":"assignments/week06/#microchip-attiny412-support-for-arduino","text":"I added megaTinyCore using Arduino Boards Manager as descripted in installation instructions: https://github.com/SpenceKonde/megaTinyCore/blob/master/Installation.md Add additional board manager: \"File->Preferences\" \"Additional Boards Manager URLS:\" (http://drazzy.com/package_drazzy.com_index.json) Then open Boards Manager and install megaTinyCore: \"Tools->Board->Boards Manager\" install \"megaTinyCore\" After that Arduino should have support for ATtiny412 and many other chips from that family.","title":"Microchip ATtiny412 support for Arduino"},{"location":"assignments/week06/#compiling-hellot412echoino-test-program","text":"I downloaded hello.t412.echo.ino and opened it to Arduino. http://academy.cba.mit.edu/classes/embedded_programming/t412/hello.t412.echo.ino Select correct environment for that ATtiny412 chip. \"Tools->Board->megaTinyCore->ATtiny412/402/212/202\" \"Tools->Chip->ATtiny412\" \"Sketch->Compile/Verify\" Sketch uses 1918 bytes (46%) of program storage space. Maximum is 4096 bytes. Global variables use 91 bytes (35%) of dynamic memory, leaving 165 bytes for local variables. Maximum is 256 bytes. It compiled correctly.","title":"Compiling hello.t412.echo.ino test program"},{"location":"assignments/week06/#transfer-hellot412echo-program-to-chip","text":"Connect UPDI, Vcc and GND wires between programmer and device carefully and correctly. Plug UPDI programmer to computer. On my case, Linux, it appears as /dev/ttyACM0 serial device. UPDI programmer pinout: https://gitlab.fabcloud.org/pub/programmers/programmer-updi-d11c hello.t412.echo pinout: http://academy.cba.mit.edu/classes/embedded_programming/t412/hello.t412.echo.png \"Tools->Port\" (/dev/ttyACM0) \"Tools->Programmer->SerialUPDI - SLOW: 57600 baud, any platform, any voltage, any adapter.\" \"Sketch->Upload\" SerialUPDI UPDI programming for Arduino using a serial adapter Based on pymcuprog, with significant modifications By Quentin Bolsee and Spence Konde Version 1.2.3 - Jan 2022 Using serial port /dev/ttyACM0 at 57600 baud. Target: attiny412 Set fuses: ['2:0x02', '6:0x04', '8:0x00'] Action: write File: /tmp/arduino_build_547357/hello.t412.echo.ino.hex Pinging device... Ping response: 1E9223 Setting fuse 0x2=0x2 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x6=0x4 Writing literal values... Verifying literal values... Action took 0.02s Setting fuse 0x8=0x0 Writing literal values... Verifying literal values... Action took 0.02s Finished writing fuses. Chip/Bulk erase, Memory type eeprom is conditionally erased (depending upon EESAVE fuse setting) Memory type flash is always erased Memory type lockbits is always erased ... Erased. Action took 0.01s Writing from hex file... Writing flash... [==================================================] 30/30 Action took 0.65s Verifying... [==================================================] 4/4 Verify successful. Data in flash matches data in specified hex-file Action took 0.42s Chip firmware is uploaded successfully, which is is enough to confirm our UPDI programmer works correctly.","title":"Transfer hello.t412.echo program to chip"},{"location":"assignments/week06/#test-hellot412echo-board","text":"I think this is out of scope of that week, but here it is briefly. I used USB UART board to test hello.t412.echo board. Connect TX<->RX and RX<->TX lines between USB UART and hello.t412.echo board. Also connect 5V Vcc and GND from USB UART to hello.t412.echo board. Disable hw flow control from USB UART (not sure if it is needed, I didn't test). Plug USB cable to computer and open terminal with following settings and test to type some letters. [crope@localhost hello.t412.echo]$ python -m serial.tools.miniterm /dev/ttyUSB0 115200 --- Miniterm on /dev/ttyUSB0 115200,8,N,1 --- --- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H --- hello.t412.echo: you typed \"H\" hello.t412.echo: you typed \"He\" hello.t412.echo: you typed \"Hel\" hello.t412.echo: you typed \"Hell\" hello.t412.echo: you typed \"Hello\" hello.t412.echo: you typed \"Hello \" hello.t412.echo: you typed \"Hello F\" hello.t412.echo: you typed \"Hello Fa\" hello.t412.echo: you typed \"Hello Fab\" hello.t412.echo: you typed \"Hello Fab \" hello.t412.echo: you typed \"Hello Fab L\" hello.t412.echo: you typed \"Hello Fab La\" hello.t412.echo: you typed \"Hello Fab Lab\" hello.t412.echo: you typed \"Hello Fab Lab \" hello.t412.echo: you typed \"Hello Fab Lab O\" hello.t412.echo: you typed \"Hello Fab Lab Ou\" hello.t412.echo: you typed \"Hello Fab Lab Oul\" hello.t412.echo: you typed \"Hello Fab Lab Oulu\" --- exit --- [crope@localhost hello.t412.echo]$","title":"Test hello.t412.echo board"}]}